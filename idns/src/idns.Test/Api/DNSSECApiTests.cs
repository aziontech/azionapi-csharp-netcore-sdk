/*
 * Intelligent DNS
 *
 * Azion Intelligent DNS API
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using idns.Client;
using idns.Api;
// uncomment below to import models
//using idns.Model;

namespace idns.Test.Api
{
    /// <summary>
    ///  Class for testing DNSSECApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DNSSECApiTests : IDisposable
    {
        private DNSSECApi instance;

        public DNSSECApiTests()
        {
            instance = new DNSSECApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DNSSECApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DNSSECApi
            //Assert.IsType<DNSSECApi>(instance);
        }

        /// <summary>
        /// Test GetZoneDnsSec
        /// </summary>
        [Fact]
        public void GetZoneDnsSecTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int zoneId = null;
            //var response = instance.GetZoneDnsSec(zoneId);
            //Assert.IsType<GetOrPatchDnsSecResponse>(response);
        }

        /// <summary>
        /// Test PutZoneDnsSec
        /// </summary>
        [Fact]
        public void PutZoneDnsSecTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int zoneId = null;
            //DnsSec dnsSec = null;
            //var response = instance.PutZoneDnsSec(zoneId, dnsSec);
            //Assert.IsType<GetOrPatchDnsSecResponse>(response);
        }
    }
}
