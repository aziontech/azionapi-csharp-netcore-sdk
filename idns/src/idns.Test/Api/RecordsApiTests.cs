/*
 * Intelligent DNS
 *
 * Azion Intelligent DNS API
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using idns.Client;
using idns.Api;
// uncomment below to import models
//using idns.Model;

namespace idns.Test.Api
{
    /// <summary>
    ///  Class for testing RecordsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class RecordsApiTests : IDisposable
    {
        private RecordsApi instance;

        public RecordsApiTests()
        {
            instance = new RecordsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of RecordsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' RecordsApi
            //Assert.IsType<RecordsApi>(instance);
        }

        /// <summary>
        /// Test DeleteZoneRecord
        /// </summary>
        [Fact]
        public void DeleteZoneRecordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int zoneId = null;
            //int recordId = null;
            //var response = instance.DeleteZoneRecord(zoneId, recordId);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test GetZoneRecords
        /// </summary>
        [Fact]
        public void GetZoneRecordsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int zoneId = null;
            //var response = instance.GetZoneRecords(zoneId);
            //Assert.IsType<GetRecordsResponse>(response);
        }

        /// <summary>
        /// Test PostZoneRecord
        /// </summary>
        [Fact]
        public void PostZoneRecordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int zoneId = null;
            //RecordPostOrPut recordPostOrPut = null;
            //var response = instance.PostZoneRecord(zoneId, recordPostOrPut);
            //Assert.IsType<PostOrPutRecordResponse>(response);
        }

        /// <summary>
        /// Test PutZoneRecord
        /// </summary>
        [Fact]
        public void PutZoneRecordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int zoneId = null;
            //int recordId = null;
            //RecordPostOrPut recordPostOrPut = null;
            //var response = instance.PutZoneRecord(zoneId, recordId, recordPostOrPut);
            //Assert.IsType<PostOrPutRecordResponse>(response);
        }
    }
}
