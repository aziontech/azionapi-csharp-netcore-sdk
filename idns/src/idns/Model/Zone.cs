/*
 * Intelligent DNS
 *
 * Azion Intelligent DNS API
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = idns.Client.OpenAPIDateConverter;

namespace idns.Model
{
    /// <summary>
    /// Zone
    /// </summary>
    [DataContract(Name = "Zone")]
    public partial class Zone : IEquatable<Zone>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Zone" /> class.
        /// </summary>
        /// <param name="id">Hosted zone id.</param>
        /// <param name="name">Hosted zone name.</param>
        /// <param name="domain">Hosted zone domain.</param>
        /// <param name="isActive">If hosted zone is active.</param>
        /// <param name="retry">retry.</param>
        /// <param name="nxTtl">nxTtl.</param>
        /// <param name="soaTtl">soaTtl.</param>
        /// <param name="refresh">refresh.</param>
        /// <param name="expiry">expiry.</param>
        /// <param name="nameservers">List of nameservers.</param>
        public Zone(int id = default(int), string name = default(string), string domain = default(string), bool isActive = default(bool), int? retry = default(int?), int? nxTtl = default(int?), int? soaTtl = default(int?), int? refresh = default(int?), int? expiry = default(int?), List<string> nameservers = default(List<string>))
        {
            this.Id = id;
            this.Name = name;
            this.Domain = domain;
            this.IsActive = isActive;
            this.Retry = retry;
            this.NxTtl = nxTtl;
            this.SoaTtl = soaTtl;
            this.Refresh = refresh;
            this.Expiry = expiry;
            this.Nameservers = nameservers;
        }

        /// <summary>
        /// Hosted zone id
        /// </summary>
        /// <value>Hosted zone id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Hosted zone name
        /// </summary>
        /// <value>Hosted zone name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Hosted zone domain
        /// </summary>
        /// <value>Hosted zone domain</value>
        [DataMember(Name = "domain", EmitDefaultValue = false)]
        public string Domain { get; set; }

        /// <summary>
        /// If hosted zone is active
        /// </summary>
        /// <value>If hosted zone is active</value>
        [DataMember(Name = "is_active", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets or Sets Retry
        /// </summary>
        [DataMember(Name = "retry", EmitDefaultValue = true)]
        public int? Retry { get; set; }

        /// <summary>
        /// Gets or Sets NxTtl
        /// </summary>
        [DataMember(Name = "nx_ttl", EmitDefaultValue = true)]
        public int? NxTtl { get; set; }

        /// <summary>
        /// Gets or Sets SoaTtl
        /// </summary>
        [DataMember(Name = "soa_ttl", EmitDefaultValue = true)]
        public int? SoaTtl { get; set; }

        /// <summary>
        /// Gets or Sets Refresh
        /// </summary>
        [DataMember(Name = "refresh", EmitDefaultValue = true)]
        public int? Refresh { get; set; }

        /// <summary>
        /// Gets or Sets Expiry
        /// </summary>
        [DataMember(Name = "expiry", EmitDefaultValue = true)]
        public int? Expiry { get; set; }

        /// <summary>
        /// List of nameservers
        /// </summary>
        /// <value>List of nameservers</value>
        [DataMember(Name = "nameservers", EmitDefaultValue = true)]
        public List<string> Nameservers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Zone {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  Retry: ").Append(Retry).Append("\n");
            sb.Append("  NxTtl: ").Append(NxTtl).Append("\n");
            sb.Append("  SoaTtl: ").Append(SoaTtl).Append("\n");
            sb.Append("  Refresh: ").Append(Refresh).Append("\n");
            sb.Append("  Expiry: ").Append(Expiry).Append("\n");
            sb.Append("  Nameservers: ").Append(Nameservers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Zone);
        }

        /// <summary>
        /// Returns true if Zone instances are equal
        /// </summary>
        /// <param name="input">Instance of Zone to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Zone input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    this.IsActive.Equals(input.IsActive)
                ) && 
                (
                    this.Retry == input.Retry ||
                    (this.Retry != null &&
                    this.Retry.Equals(input.Retry))
                ) && 
                (
                    this.NxTtl == input.NxTtl ||
                    (this.NxTtl != null &&
                    this.NxTtl.Equals(input.NxTtl))
                ) && 
                (
                    this.SoaTtl == input.SoaTtl ||
                    (this.SoaTtl != null &&
                    this.SoaTtl.Equals(input.SoaTtl))
                ) && 
                (
                    this.Refresh == input.Refresh ||
                    (this.Refresh != null &&
                    this.Refresh.Equals(input.Refresh))
                ) && 
                (
                    this.Expiry == input.Expiry ||
                    (this.Expiry != null &&
                    this.Expiry.Equals(input.Expiry))
                ) && 
                (
                    this.Nameservers == input.Nameservers ||
                    this.Nameservers != null &&
                    input.Nameservers != null &&
                    this.Nameservers.SequenceEqual(input.Nameservers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Domain != null)
                {
                    hashCode = (hashCode * 59) + this.Domain.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsActive.GetHashCode();
                if (this.Retry != null)
                {
                    hashCode = (hashCode * 59) + this.Retry.GetHashCode();
                }
                if (this.NxTtl != null)
                {
                    hashCode = (hashCode * 59) + this.NxTtl.GetHashCode();
                }
                if (this.SoaTtl != null)
                {
                    hashCode = (hashCode * 59) + this.SoaTtl.GetHashCode();
                }
                if (this.Refresh != null)
                {
                    hashCode = (hashCode * 59) + this.Refresh.GetHashCode();
                }
                if (this.Expiry != null)
                {
                    hashCode = (hashCode * 59) + this.Expiry.GetHashCode();
                }
                if (this.Nameservers != null)
                {
                    hashCode = (hashCode * 59) + this.Nameservers.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
