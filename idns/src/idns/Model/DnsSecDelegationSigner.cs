/*
 * Intelligent DNS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = idns.Client.OpenAPIDateConverter;

namespace idns.Model
{
    /// <summary>
    /// DnsSecDelegationSigner
    /// </summary>
    [DataContract(Name = "DnsSec_delegation_signer")]
    public partial class DnsSecDelegationSigner : IEquatable<DnsSecDelegationSigner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DnsSecDelegationSigner" /> class.
        /// </summary>
        /// <param name="digestType">digestType.</param>
        /// <param name="algorithmType">algorithmType.</param>
        /// <param name="digest">digest.</param>
        /// <param name="keyTag">keyTag.</param>
        public DnsSecDelegationSigner(DnsSecDelegationSignerDigestType digestType = default(DnsSecDelegationSignerDigestType), DnsSecDelegationSignerDigestType algorithmType = default(DnsSecDelegationSignerDigestType), string digest = default(string), int keyTag = default(int))
        {
            this.DigestType = digestType;
            this.AlgorithmType = algorithmType;
            this.Digest = digest;
            this.KeyTag = keyTag;
        }

        /// <summary>
        /// Gets or Sets DigestType
        /// </summary>
        [DataMember(Name = "digest_type", EmitDefaultValue = false)]
        public DnsSecDelegationSignerDigestType DigestType { get; set; }

        /// <summary>
        /// Gets or Sets AlgorithmType
        /// </summary>
        [DataMember(Name = "algorithm_type", EmitDefaultValue = false)]
        public DnsSecDelegationSignerDigestType AlgorithmType { get; set; }

        /// <summary>
        /// Gets or Sets Digest
        /// </summary>
        [DataMember(Name = "digest", EmitDefaultValue = false)]
        public string Digest { get; set; }

        /// <summary>
        /// Gets or Sets KeyTag
        /// </summary>
        [DataMember(Name = "key_tag", EmitDefaultValue = false)]
        public int KeyTag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DnsSecDelegationSigner {\n");
            sb.Append("  DigestType: ").Append(DigestType).Append("\n");
            sb.Append("  AlgorithmType: ").Append(AlgorithmType).Append("\n");
            sb.Append("  Digest: ").Append(Digest).Append("\n");
            sb.Append("  KeyTag: ").Append(KeyTag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DnsSecDelegationSigner);
        }

        /// <summary>
        /// Returns true if DnsSecDelegationSigner instances are equal
        /// </summary>
        /// <param name="input">Instance of DnsSecDelegationSigner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DnsSecDelegationSigner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DigestType == input.DigestType ||
                    (this.DigestType != null &&
                    this.DigestType.Equals(input.DigestType))
                ) && 
                (
                    this.AlgorithmType == input.AlgorithmType ||
                    (this.AlgorithmType != null &&
                    this.AlgorithmType.Equals(input.AlgorithmType))
                ) && 
                (
                    this.Digest == input.Digest ||
                    (this.Digest != null &&
                    this.Digest.Equals(input.Digest))
                ) && 
                (
                    this.KeyTag == input.KeyTag ||
                    this.KeyTag.Equals(input.KeyTag)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DigestType != null)
                {
                    hashCode = (hashCode * 59) + this.DigestType.GetHashCode();
                }
                if (this.AlgorithmType != null)
                {
                    hashCode = (hashCode * 59) + this.AlgorithmType.GetHashCode();
                }
                if (this.Digest != null)
                {
                    hashCode = (hashCode * 59) + this.Digest.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.KeyTag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // KeyTag (int) maximum
            if (this.KeyTag > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for KeyTag, must be a value less than or equal to 65535.", new [] { "KeyTag" });
            }

            // KeyTag (int) minimum
            if (this.KeyTag < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for KeyTag, must be a value greater than or equal to 1.", new [] { "KeyTag" });
            }

            yield break;
        }
    }

}
