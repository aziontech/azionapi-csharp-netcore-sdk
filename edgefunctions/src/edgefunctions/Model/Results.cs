/*
 * Edge Function API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = edgefunctions.Client.OpenAPIDateConverter;

namespace edgefunctions.Model
{
    /// <summary>
    /// Results
    /// </summary>
    [DataContract(Name = "Results")]
    public partial class Results : IEquatable<Results>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Results" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="language">language.</param>
        /// <param name="code">code.</param>
        /// <param name="jsonArgs">jsonArgs.</param>
        /// <param name="functionToRun">functionToRun.</param>
        /// <param name="initiatorType">initiatorType.</param>
        /// <param name="active">active.</param>
        /// <param name="lastEditor">lastEditor.</param>
        /// <param name="modified">modified.</param>
        /// <param name="referenceCount">referenceCount.</param>
        /// <param name="isProprietaryCode">isProprietaryCode.</param>
        public Results(long id = default(long), string name = default(string), string language = default(string), string code = default(string), Object jsonArgs = default(Object), string functionToRun = default(string), string initiatorType = default(string), bool active = default(bool), string lastEditor = default(string), string modified = default(string), long referenceCount = default(long), bool isProprietaryCode = default(bool))
        {
            this.Id = id;
            this.Name = name;
            this.Language = language;
            this.Code = code;
            this.JsonArgs = jsonArgs;
            this.FunctionToRun = functionToRun;
            this.InitiatorType = initiatorType;
            this.Active = active;
            this.LastEditor = lastEditor;
            this.Modified = modified;
            this.ReferenceCount = referenceCount;
            this.IsProprietaryCode = isProprietaryCode;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets JsonArgs
        /// </summary>
        [DataMember(Name = "json_args", EmitDefaultValue = true)]
        public Object JsonArgs { get; set; }

        /// <summary>
        /// Gets or Sets FunctionToRun
        /// </summary>
        [DataMember(Name = "function_to_run", EmitDefaultValue = false)]
        public string FunctionToRun { get; set; }

        /// <summary>
        /// Gets or Sets InitiatorType
        /// </summary>
        [DataMember(Name = "initiator_type", EmitDefaultValue = false)]
        public string InitiatorType { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets LastEditor
        /// </summary>
        [DataMember(Name = "last_editor", EmitDefaultValue = false)]
        public string LastEditor { get; set; }

        /// <summary>
        /// Gets or Sets Modified
        /// </summary>
        [DataMember(Name = "modified", EmitDefaultValue = false)]
        public string Modified { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceCount
        /// </summary>
        [DataMember(Name = "reference_count", EmitDefaultValue = false)]
        public long ReferenceCount { get; set; }

        /// <summary>
        /// Gets or Sets IsProprietaryCode
        /// </summary>
        [DataMember(Name = "is_proprietary_code", EmitDefaultValue = true)]
        public bool IsProprietaryCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Results {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  JsonArgs: ").Append(JsonArgs).Append("\n");
            sb.Append("  FunctionToRun: ").Append(FunctionToRun).Append("\n");
            sb.Append("  InitiatorType: ").Append(InitiatorType).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  LastEditor: ").Append(LastEditor).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  ReferenceCount: ").Append(ReferenceCount).Append("\n");
            sb.Append("  IsProprietaryCode: ").Append(IsProprietaryCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Results);
        }

        /// <summary>
        /// Returns true if Results instances are equal
        /// </summary>
        /// <param name="input">Instance of Results to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Results input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.JsonArgs == input.JsonArgs ||
                    (this.JsonArgs != null &&
                    this.JsonArgs.Equals(input.JsonArgs))
                ) && 
                (
                    this.FunctionToRun == input.FunctionToRun ||
                    (this.FunctionToRun != null &&
                    this.FunctionToRun.Equals(input.FunctionToRun))
                ) && 
                (
                    this.InitiatorType == input.InitiatorType ||
                    (this.InitiatorType != null &&
                    this.InitiatorType.Equals(input.InitiatorType))
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.LastEditor == input.LastEditor ||
                    (this.LastEditor != null &&
                    this.LastEditor.Equals(input.LastEditor))
                ) && 
                (
                    this.Modified == input.Modified ||
                    (this.Modified != null &&
                    this.Modified.Equals(input.Modified))
                ) && 
                (
                    this.ReferenceCount == input.ReferenceCount ||
                    this.ReferenceCount.Equals(input.ReferenceCount)
                ) && 
                (
                    this.IsProprietaryCode == input.IsProprietaryCode ||
                    this.IsProprietaryCode.Equals(input.IsProprietaryCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Language != null)
                {
                    hashCode = (hashCode * 59) + this.Language.GetHashCode();
                }
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.JsonArgs != null)
                {
                    hashCode = (hashCode * 59) + this.JsonArgs.GetHashCode();
                }
                if (this.FunctionToRun != null)
                {
                    hashCode = (hashCode * 59) + this.FunctionToRun.GetHashCode();
                }
                if (this.InitiatorType != null)
                {
                    hashCode = (hashCode * 59) + this.InitiatorType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                if (this.LastEditor != null)
                {
                    hashCode = (hashCode * 59) + this.LastEditor.GetHashCode();
                }
                if (this.Modified != null)
                {
                    hashCode = (hashCode * 59) + this.Modified.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReferenceCount.GetHashCode();
                hashCode = (hashCode * 59) + this.IsProprietaryCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
