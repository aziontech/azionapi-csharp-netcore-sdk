/*
 * Edge Function
 *
 * Azion Edge Function API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using edgefunctions.Client;
using edgefunctions.Api;
// uncomment below to import models
//using edgefunctions.Model;

namespace edgefunctions.Test.Api
{
    /// <summary>
    ///  Class for testing EdgeFunctionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class EdgeFunctionsApiTests : IDisposable
    {
        private EdgeFunctionsApi instance;

        public EdgeFunctionsApiTests()
        {
            instance = new EdgeFunctionsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of EdgeFunctionsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' EdgeFunctionsApi
            //Assert.IsType<EdgeFunctionsApi>(instance);
        }

        /// <summary>
        /// Test EdgeFunctionsGet
        /// </summary>
        [Fact]
        public void EdgeFunctionsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? page = null;
            //long? pageSize = null;
            //string sort = null;
            //string orderBy = null;
            //var response = instance.EdgeFunctionsGet(page, pageSize, sort, orderBy);
            //Assert.IsType<ListEdgeFunctionResponse>(response);
        }

        /// <summary>
        /// Test EdgeFunctionsIdDelete
        /// </summary>
        [Fact]
        public void EdgeFunctionsIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //instance.EdgeFunctionsIdDelete(id);
        }

        /// <summary>
        /// Test EdgeFunctionsIdGet
        /// </summary>
        [Fact]
        public void EdgeFunctionsIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //var response = instance.EdgeFunctionsIdGet(id);
            //Assert.IsType<EdgeFunctionResponse>(response);
        }

        /// <summary>
        /// Test EdgeFunctionsIdPatch
        /// </summary>
        [Fact]
        public void EdgeFunctionsIdPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //PatchEdgeFunctionRequest patchEdgeFunctionRequest = null;
            //var response = instance.EdgeFunctionsIdPatch(id, patchEdgeFunctionRequest);
            //Assert.IsType<EdgeFunctionResponse>(response);
        }

        /// <summary>
        /// Test EdgeFunctionsIdPut
        /// </summary>
        [Fact]
        public void EdgeFunctionsIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //PutEdgeFunctionRequest putEdgeFunctionRequest = null;
            //var response = instance.EdgeFunctionsIdPut(id, putEdgeFunctionRequest);
            //Assert.IsType<EdgeFunctionResponse>(response);
        }

        /// <summary>
        /// Test EdgeFunctionsPost
        /// </summary>
        [Fact]
        public void EdgeFunctionsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateEdgeFunctionRequest createEdgeFunctionRequest = null;
            //var response = instance.EdgeFunctionsPost(createEdgeFunctionRequest);
            //Assert.IsType<EdgeFunctionResponse>(response);
        }
    }
}
