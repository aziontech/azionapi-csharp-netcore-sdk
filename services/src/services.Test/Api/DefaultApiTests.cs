/*
 * Services API
 *
 * Azion Services
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using services.Client;
using services.Api;
// uncomment below to import models
//using services.Model;

namespace services.Test.Api
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DefaultApiTests : IDisposable
    {
        private DefaultApi instance;

        public DefaultApiTests()
        {
            instance = new DefaultApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DefaultApi
            //Assert.IsType<DefaultApi>(instance);
        }

        /// <summary>
        /// Test DeleteResource
        /// </summary>
        [Fact]
        public void DeleteResourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long serviceId = null;
            //long resourceId = null;
            //instance.DeleteResource(serviceId, resourceId);
        }

        /// <summary>
        /// Test DeleteService
        /// </summary>
        [Fact]
        public void DeleteServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //instance.DeleteService(id);
        }

        /// <summary>
        /// Test GetResource
        /// </summary>
        [Fact]
        public void GetResourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long serviceId = null;
            //long resourceId = null;
            //var response = instance.GetResource(serviceId, resourceId);
            //Assert.IsType<ResourceDetail>(response);
        }

        /// <summary>
        /// Test GetResources
        /// </summary>
        [Fact]
        public void GetResourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long serviceId = null;
            //long? page = null;
            //long? pageSize = null;
            //string filter = null;
            //string orderBy = null;
            //string sort = null;
            //var response = instance.GetResources(serviceId, page, pageSize, filter, orderBy, sort);
            //Assert.IsType<ResourceResponseWithTotal>(response);
        }

        /// <summary>
        /// Test GetService
        /// </summary>
        [Fact]
        public void GetServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //bool? withVars = null;
            //var response = instance.GetService(id, withVars);
            //Assert.IsType<ServiceResponse>(response);
        }

        /// <summary>
        /// Test GetServices
        /// </summary>
        [Fact]
        public void GetServicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? page = null;
            //long? pageSize = null;
            //string filter = null;
            //string orderBy = null;
            //string sort = null;
            //var response = instance.GetServices(page, pageSize, filter, orderBy, sort);
            //Assert.IsType<ServiceResponseWithTotals>(response);
        }

        /// <summary>
        /// Test NewService
        /// </summary>
        [Fact]
        public void NewServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateServiceRequest createServiceRequest = null;
            //var response = instance.NewService(createServiceRequest);
            //Assert.IsType<ServiceResponse>(response);
        }

        /// <summary>
        /// Test PatchService
        /// </summary>
        [Fact]
        public void PatchServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //UpdateServiceRequest updateServiceRequest = null;
            //var response = instance.PatchService(id, updateServiceRequest);
            //Assert.IsType<ServiceResponse>(response);
        }

        /// <summary>
        /// Test PatchServiceResource
        /// </summary>
        [Fact]
        public void PatchServiceResourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long serviceId = null;
            //long resourceId = null;
            //UpdateResourceRequest updateResourceRequest = null;
            //var response = instance.PatchServiceResource(serviceId, resourceId, updateResourceRequest);
            //Assert.IsType<ResourceDetail>(response);
        }

        /// <summary>
        /// Test PostResource
        /// </summary>
        [Fact]
        public void PostResourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long serviceId = null;
            //CreateResourceRequest createResourceRequest = null;
            //var response = instance.PostResource(serviceId, createResourceRequest);
            //Assert.IsType<ResourceDetail>(response);
        }
    }
}
