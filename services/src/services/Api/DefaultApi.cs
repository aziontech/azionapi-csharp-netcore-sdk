/*
 * Services API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using services.Client;
using services.Model;

namespace services.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Service Resource by ID
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="resourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteResource(long serviceId, long resourceId, int operationIndex = 0);

        /// <summary>
        /// Delete Service Resource by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="resourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteResourceWithHttpInfo(long serviceId, long resourceId, int operationIndex = 0);
        /// <summary>
        /// Delete Service by ID
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteService(long id, int operationIndex = 0);

        /// <summary>
        /// Delete Service by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteServiceWithHttpInfo(long id, int operationIndex = 0);
        /// <summary>
        /// Return Service Resource by ID
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="resourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResourceDetail</returns>
        ResourceDetail GetResource(long serviceId, long resourceId, int operationIndex = 0);

        /// <summary>
        /// Return Service Resource by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="resourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResourceDetail</returns>
        ApiResponse<ResourceDetail> GetResourceWithHttpInfo(long serviceId, long resourceId, int operationIndex = 0);
        /// <summary>
        /// Return Service Resources by page
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object GetResources(long serviceId, long? page = default(long?), long? pageSize = default(long?), string filter = default(string), string orderBy = default(string), string sort = default(string), int operationIndex = 0);

        /// <summary>
        /// Return Service Resources by page
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetResourcesWithHttpInfo(long serviceId, long? page = default(long?), long? pageSize = default(long?), string filter = default(string), string orderBy = default(string), string sort = default(string), int operationIndex = 0);
        /// <summary>
        /// Return Service by ID
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="withVars"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceResponse</returns>
        ServiceResponse GetService(long id, bool? withVars = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Return Service by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="withVars"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceResponse</returns>
        ApiResponse<ServiceResponse> GetServiceWithHttpInfo(long id, bool? withVars = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Return Services by page
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceResponseWithTotals</returns>
        ServiceResponseWithTotals GetServices(long? page = default(long?), long? pageSize = default(long?), string filter = default(string), string orderBy = default(string), string sort = default(string), int operationIndex = 0);

        /// <summary>
        /// Return Services by page
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceResponseWithTotals</returns>
        ApiResponse<ServiceResponseWithTotals> GetServicesWithHttpInfo(long? page = default(long?), long? pageSize = default(long?), string filter = default(string), string orderBy = default(string), string sort = default(string), int operationIndex = 0);
        /// <summary>
        /// Create Service
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createServiceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceResponse</returns>
        ServiceResponse NewService(CreateServiceRequest createServiceRequest, int operationIndex = 0);

        /// <summary>
        /// Create Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createServiceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceResponse</returns>
        ApiResponse<ServiceResponse> NewServiceWithHttpInfo(CreateServiceRequest createServiceRequest, int operationIndex = 0);
        /// <summary>
        /// Update Service by ID
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateServiceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceResponse</returns>
        ServiceResponse PatchService(long id, UpdateServiceRequest updateServiceRequest, int operationIndex = 0);

        /// <summary>
        /// Update Service by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateServiceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceResponse</returns>
        ApiResponse<ServiceResponse> PatchServiceWithHttpInfo(long id, UpdateServiceRequest updateServiceRequest, int operationIndex = 0);
        /// <summary>
        /// Update Service Resource by ID
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="resourceId"></param>
        /// <param name="updateResourceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResourceDetail</returns>
        ResourceDetail PatchServiceResource(long serviceId, long resourceId, UpdateResourceRequest updateResourceRequest, int operationIndex = 0);

        /// <summary>
        /// Update Service Resource by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="resourceId"></param>
        /// <param name="updateResourceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResourceDetail</returns>
        ApiResponse<ResourceDetail> PatchServiceResourceWithHttpInfo(long serviceId, long resourceId, UpdateResourceRequest updateResourceRequest, int operationIndex = 0);
        /// <summary>
        /// Create Service Resource
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="createResourceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResourceDetail</returns>
        ResourceDetail PostResource(long serviceId, CreateResourceRequest createResourceRequest, int operationIndex = 0);

        /// <summary>
        /// Create Service Resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="createResourceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResourceDetail</returns>
        ApiResponse<ResourceDetail> PostResourceWithHttpInfo(long serviceId, CreateResourceRequest createResourceRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete Service Resource by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="resourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteResourceAsync(long serviceId, long resourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Service Resource by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="resourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteResourceWithHttpInfoAsync(long serviceId, long resourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Service by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteServiceAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Service by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteServiceWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return Service Resource by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="resourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceDetail</returns>
        System.Threading.Tasks.Task<ResourceDetail> GetResourceAsync(long serviceId, long resourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return Service Resource by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="resourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceDetail>> GetResourceWithHttpInfoAsync(long serviceId, long resourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return Service Resources by page
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetResourcesAsync(long serviceId, long? page = default(long?), long? pageSize = default(long?), string filter = default(string), string orderBy = default(string), string sort = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return Service Resources by page
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetResourcesWithHttpInfoAsync(long serviceId, long? page = default(long?), long? pageSize = default(long?), string filter = default(string), string orderBy = default(string), string sort = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return Service by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="withVars"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceResponse</returns>
        System.Threading.Tasks.Task<ServiceResponse> GetServiceAsync(long id, bool? withVars = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return Service by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="withVars"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceResponse>> GetServiceWithHttpInfoAsync(long id, bool? withVars = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return Services by page
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceResponseWithTotals</returns>
        System.Threading.Tasks.Task<ServiceResponseWithTotals> GetServicesAsync(long? page = default(long?), long? pageSize = default(long?), string filter = default(string), string orderBy = default(string), string sort = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return Services by page
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceResponseWithTotals)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceResponseWithTotals>> GetServicesWithHttpInfoAsync(long? page = default(long?), long? pageSize = default(long?), string filter = default(string), string orderBy = default(string), string sort = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createServiceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceResponse</returns>
        System.Threading.Tasks.Task<ServiceResponse> NewServiceAsync(CreateServiceRequest createServiceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createServiceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceResponse>> NewServiceWithHttpInfoAsync(CreateServiceRequest createServiceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Service by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateServiceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceResponse</returns>
        System.Threading.Tasks.Task<ServiceResponse> PatchServiceAsync(long id, UpdateServiceRequest updateServiceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Service by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateServiceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceResponse>> PatchServiceWithHttpInfoAsync(long id, UpdateServiceRequest updateServiceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Service Resource by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="resourceId"></param>
        /// <param name="updateResourceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceDetail</returns>
        System.Threading.Tasks.Task<ResourceDetail> PatchServiceResourceAsync(long serviceId, long resourceId, UpdateResourceRequest updateResourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Service Resource by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="resourceId"></param>
        /// <param name="updateResourceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceDetail>> PatchServiceResourceWithHttpInfoAsync(long serviceId, long resourceId, UpdateResourceRequest updateResourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Service Resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="createResourceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceDetail</returns>
        System.Threading.Tasks.Task<ResourceDetail> PostResourceAsync(long serviceId, CreateResourceRequest createResourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Service Resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="createResourceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceDetail>> PostResourceWithHttpInfoAsync(long serviceId, CreateResourceRequest createResourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private services.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            this.Configuration = services.Client.Configuration.MergeConfigurations(
                services.Client.GlobalConfiguration.Instance,
                new services.Client.Configuration { BasePath = basePath }
            );
            this.Client = new services.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new services.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = services.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(services.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = services.Client.Configuration.MergeConfigurations(
                services.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new services.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new services.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = services.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(services.Client.ISynchronousClient client, services.Client.IAsynchronousClient asyncClient, services.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = services.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public services.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public services.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public services.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public services.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete Service Resource by ID 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="resourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteResource(long serviceId, long resourceId, int operationIndex = 0)
        {
            DeleteResourceWithHttpInfo(serviceId, resourceId);
        }

        /// <summary>
        /// Delete Service Resource by ID 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="resourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public services.Client.ApiResponse<Object> DeleteResourceWithHttpInfo(long serviceId, long resourceId, int operationIndex = 0)
        {
            services.Client.RequestOptions localVarRequestOptions = new services.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = services.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = services.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("serviceId", services.Client.ClientUtils.ParameterToString(serviceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("resourceId", services.Client.ClientUtils.ParameterToString(resourceId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.DeleteResource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/edge_services/{serviceId}/resources/{resourceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteResource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Service Resource by ID 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="resourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteResourceAsync(long serviceId, long resourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteResourceWithHttpInfoAsync(serviceId, resourceId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Service Resource by ID 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="resourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<services.Client.ApiResponse<Object>> DeleteResourceWithHttpInfoAsync(long serviceId, long resourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            services.Client.RequestOptions localVarRequestOptions = new services.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = services.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = services.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("serviceId", services.Client.ClientUtils.ParameterToString(serviceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("resourceId", services.Client.ClientUtils.ParameterToString(resourceId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.DeleteResource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/edge_services/{serviceId}/resources/{resourceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteResource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Service by ID 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteService(long id, int operationIndex = 0)
        {
            DeleteServiceWithHttpInfo(id);
        }

        /// <summary>
        /// Delete Service by ID 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public services.Client.ApiResponse<Object> DeleteServiceWithHttpInfo(long id, int operationIndex = 0)
        {
            services.Client.RequestOptions localVarRequestOptions = new services.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = services.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = services.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", services.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.DeleteService";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/edge_services/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteService", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Service by ID 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteServiceAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteServiceWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Service by ID 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<services.Client.ApiResponse<Object>> DeleteServiceWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            services.Client.RequestOptions localVarRequestOptions = new services.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = services.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = services.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", services.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.DeleteService";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/edge_services/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteService", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return Service Resource by ID 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="resourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResourceDetail</returns>
        public ResourceDetail GetResource(long serviceId, long resourceId, int operationIndex = 0)
        {
            services.Client.ApiResponse<ResourceDetail> localVarResponse = GetResourceWithHttpInfo(serviceId, resourceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return Service Resource by ID 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="resourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResourceDetail</returns>
        public services.Client.ApiResponse<ResourceDetail> GetResourceWithHttpInfo(long serviceId, long resourceId, int operationIndex = 0)
        {
            services.Client.RequestOptions localVarRequestOptions = new services.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = services.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = services.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("serviceId", services.Client.ClientUtils.ParameterToString(serviceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("resourceId", services.Client.ClientUtils.ParameterToString(resourceId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetResource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ResourceDetail>("/edge_services/{serviceId}/resources/{resourceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return Service Resource by ID 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="resourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceDetail</returns>
        public async System.Threading.Tasks.Task<ResourceDetail> GetResourceAsync(long serviceId, long resourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            services.Client.ApiResponse<ResourceDetail> localVarResponse = await GetResourceWithHttpInfoAsync(serviceId, resourceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return Service Resource by ID 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="resourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceDetail)</returns>
        public async System.Threading.Tasks.Task<services.Client.ApiResponse<ResourceDetail>> GetResourceWithHttpInfoAsync(long serviceId, long resourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            services.Client.RequestOptions localVarRequestOptions = new services.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = services.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = services.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("serviceId", services.Client.ClientUtils.ParameterToString(serviceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("resourceId", services.Client.ClientUtils.ParameterToString(resourceId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetResource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ResourceDetail>("/edge_services/{serviceId}/resources/{resourceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return Service Resources by page 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object GetResources(long serviceId, long? page = default(long?), long? pageSize = default(long?), string filter = default(string), string orderBy = default(string), string sort = default(string), int operationIndex = 0)
        {
            services.Client.ApiResponse<Object> localVarResponse = GetResourcesWithHttpInfo(serviceId, page, pageSize, filter, orderBy, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return Service Resources by page 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public services.Client.ApiResponse<Object> GetResourcesWithHttpInfo(long serviceId, long? page = default(long?), long? pageSize = default(long?), string filter = default(string), string orderBy = default(string), string sort = default(string), int operationIndex = 0)
        {
            services.Client.RequestOptions localVarRequestOptions = new services.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = services.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = services.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("serviceId", services.Client.ClientUtils.ParameterToString(serviceId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(services.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(services.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(services.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(services.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(services.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetResources";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/edge_services/{serviceId}/resources", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return Service Resources by page 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetResourcesAsync(long serviceId, long? page = default(long?), long? pageSize = default(long?), string filter = default(string), string orderBy = default(string), string sort = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            services.Client.ApiResponse<Object> localVarResponse = await GetResourcesWithHttpInfoAsync(serviceId, page, pageSize, filter, orderBy, sort, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return Service Resources by page 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<services.Client.ApiResponse<Object>> GetResourcesWithHttpInfoAsync(long serviceId, long? page = default(long?), long? pageSize = default(long?), string filter = default(string), string orderBy = default(string), string sort = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            services.Client.RequestOptions localVarRequestOptions = new services.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = services.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = services.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("serviceId", services.Client.ClientUtils.ParameterToString(serviceId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(services.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(services.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(services.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(services.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(services.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetResources";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/edge_services/{serviceId}/resources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return Service by ID 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="withVars"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceResponse</returns>
        public ServiceResponse GetService(long id, bool? withVars = default(bool?), int operationIndex = 0)
        {
            services.Client.ApiResponse<ServiceResponse> localVarResponse = GetServiceWithHttpInfo(id, withVars);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return Service by ID 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="withVars"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceResponse</returns>
        public services.Client.ApiResponse<ServiceResponse> GetServiceWithHttpInfo(long id, bool? withVars = default(bool?), int operationIndex = 0)
        {
            services.Client.RequestOptions localVarRequestOptions = new services.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = services.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = services.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", services.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (withVars != null)
            {
                localVarRequestOptions.QueryParameters.Add(services.Client.ClientUtils.ParameterToMultiMap("", "with_vars", withVars));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetService";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceResponse>("/edge_services/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetService", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return Service by ID 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="withVars"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceResponse</returns>
        public async System.Threading.Tasks.Task<ServiceResponse> GetServiceAsync(long id, bool? withVars = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            services.Client.ApiResponse<ServiceResponse> localVarResponse = await GetServiceWithHttpInfoAsync(id, withVars, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return Service by ID 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="withVars"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceResponse)</returns>
        public async System.Threading.Tasks.Task<services.Client.ApiResponse<ServiceResponse>> GetServiceWithHttpInfoAsync(long id, bool? withVars = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            services.Client.RequestOptions localVarRequestOptions = new services.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = services.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = services.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", services.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (withVars != null)
            {
                localVarRequestOptions.QueryParameters.Add(services.Client.ClientUtils.ParameterToMultiMap("", "with_vars", withVars));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetService";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceResponse>("/edge_services/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetService", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return Services by page 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceResponseWithTotals</returns>
        public ServiceResponseWithTotals GetServices(long? page = default(long?), long? pageSize = default(long?), string filter = default(string), string orderBy = default(string), string sort = default(string), int operationIndex = 0)
        {
            services.Client.ApiResponse<ServiceResponseWithTotals> localVarResponse = GetServicesWithHttpInfo(page, pageSize, filter, orderBy, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return Services by page 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceResponseWithTotals</returns>
        public services.Client.ApiResponse<ServiceResponseWithTotals> GetServicesWithHttpInfo(long? page = default(long?), long? pageSize = default(long?), string filter = default(string), string orderBy = default(string), string sort = default(string), int operationIndex = 0)
        {
            services.Client.RequestOptions localVarRequestOptions = new services.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = services.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = services.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(services.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(services.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(services.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(services.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(services.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetServices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceResponseWithTotals>("/edge_services", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return Services by page 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceResponseWithTotals</returns>
        public async System.Threading.Tasks.Task<ServiceResponseWithTotals> GetServicesAsync(long? page = default(long?), long? pageSize = default(long?), string filter = default(string), string orderBy = default(string), string sort = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            services.Client.ApiResponse<ServiceResponseWithTotals> localVarResponse = await GetServicesWithHttpInfoAsync(page, pageSize, filter, orderBy, sort, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return Services by page 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceResponseWithTotals)</returns>
        public async System.Threading.Tasks.Task<services.Client.ApiResponse<ServiceResponseWithTotals>> GetServicesWithHttpInfoAsync(long? page = default(long?), long? pageSize = default(long?), string filter = default(string), string orderBy = default(string), string sort = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            services.Client.RequestOptions localVarRequestOptions = new services.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = services.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = services.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(services.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(services.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(services.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(services.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(services.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetServices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceResponseWithTotals>("/edge_services", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Service 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createServiceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceResponse</returns>
        public ServiceResponse NewService(CreateServiceRequest createServiceRequest, int operationIndex = 0)
        {
            services.Client.ApiResponse<ServiceResponse> localVarResponse = NewServiceWithHttpInfo(createServiceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Service 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createServiceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceResponse</returns>
        public services.Client.ApiResponse<ServiceResponse> NewServiceWithHttpInfo(CreateServiceRequest createServiceRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createServiceRequest' is set
            if (createServiceRequest == null)
            {
                throw new services.Client.ApiException(400, "Missing required parameter 'createServiceRequest' when calling DefaultApi->NewService");
            }

            services.Client.RequestOptions localVarRequestOptions = new services.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = services.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = services.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createServiceRequest;

            localVarRequestOptions.Operation = "DefaultApi.NewService";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ServiceResponse>("/edge_services", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewService", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Service 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createServiceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceResponse</returns>
        public async System.Threading.Tasks.Task<ServiceResponse> NewServiceAsync(CreateServiceRequest createServiceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            services.Client.ApiResponse<ServiceResponse> localVarResponse = await NewServiceWithHttpInfoAsync(createServiceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Service 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createServiceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceResponse)</returns>
        public async System.Threading.Tasks.Task<services.Client.ApiResponse<ServiceResponse>> NewServiceWithHttpInfoAsync(CreateServiceRequest createServiceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createServiceRequest' is set
            if (createServiceRequest == null)
            {
                throw new services.Client.ApiException(400, "Missing required parameter 'createServiceRequest' when calling DefaultApi->NewService");
            }


            services.Client.RequestOptions localVarRequestOptions = new services.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = services.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = services.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createServiceRequest;

            localVarRequestOptions.Operation = "DefaultApi.NewService";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ServiceResponse>("/edge_services", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewService", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Service by ID 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateServiceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceResponse</returns>
        public ServiceResponse PatchService(long id, UpdateServiceRequest updateServiceRequest, int operationIndex = 0)
        {
            services.Client.ApiResponse<ServiceResponse> localVarResponse = PatchServiceWithHttpInfo(id, updateServiceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Service by ID 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateServiceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceResponse</returns>
        public services.Client.ApiResponse<ServiceResponse> PatchServiceWithHttpInfo(long id, UpdateServiceRequest updateServiceRequest, int operationIndex = 0)
        {
            // verify the required parameter 'updateServiceRequest' is set
            if (updateServiceRequest == null)
            {
                throw new services.Client.ApiException(400, "Missing required parameter 'updateServiceRequest' when calling DefaultApi->PatchService");
            }

            services.Client.RequestOptions localVarRequestOptions = new services.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = services.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = services.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", services.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateServiceRequest;

            localVarRequestOptions.Operation = "DefaultApi.PatchService";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ServiceResponse>("/edge_services/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchService", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Service by ID 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateServiceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceResponse</returns>
        public async System.Threading.Tasks.Task<ServiceResponse> PatchServiceAsync(long id, UpdateServiceRequest updateServiceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            services.Client.ApiResponse<ServiceResponse> localVarResponse = await PatchServiceWithHttpInfoAsync(id, updateServiceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Service by ID 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateServiceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceResponse)</returns>
        public async System.Threading.Tasks.Task<services.Client.ApiResponse<ServiceResponse>> PatchServiceWithHttpInfoAsync(long id, UpdateServiceRequest updateServiceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateServiceRequest' is set
            if (updateServiceRequest == null)
            {
                throw new services.Client.ApiException(400, "Missing required parameter 'updateServiceRequest' when calling DefaultApi->PatchService");
            }


            services.Client.RequestOptions localVarRequestOptions = new services.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = services.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = services.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", services.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateServiceRequest;

            localVarRequestOptions.Operation = "DefaultApi.PatchService";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ServiceResponse>("/edge_services/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchService", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Service Resource by ID 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="resourceId"></param>
        /// <param name="updateResourceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResourceDetail</returns>
        public ResourceDetail PatchServiceResource(long serviceId, long resourceId, UpdateResourceRequest updateResourceRequest, int operationIndex = 0)
        {
            services.Client.ApiResponse<ResourceDetail> localVarResponse = PatchServiceResourceWithHttpInfo(serviceId, resourceId, updateResourceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Service Resource by ID 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="resourceId"></param>
        /// <param name="updateResourceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResourceDetail</returns>
        public services.Client.ApiResponse<ResourceDetail> PatchServiceResourceWithHttpInfo(long serviceId, long resourceId, UpdateResourceRequest updateResourceRequest, int operationIndex = 0)
        {
            // verify the required parameter 'updateResourceRequest' is set
            if (updateResourceRequest == null)
            {
                throw new services.Client.ApiException(400, "Missing required parameter 'updateResourceRequest' when calling DefaultApi->PatchServiceResource");
            }

            services.Client.RequestOptions localVarRequestOptions = new services.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = services.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = services.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("serviceId", services.Client.ClientUtils.ParameterToString(serviceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("resourceId", services.Client.ClientUtils.ParameterToString(resourceId)); // path parameter
            localVarRequestOptions.Data = updateResourceRequest;

            localVarRequestOptions.Operation = "DefaultApi.PatchServiceResource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ResourceDetail>("/edge_services/{serviceId}/resources/{resourceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchServiceResource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Service Resource by ID 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="resourceId"></param>
        /// <param name="updateResourceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceDetail</returns>
        public async System.Threading.Tasks.Task<ResourceDetail> PatchServiceResourceAsync(long serviceId, long resourceId, UpdateResourceRequest updateResourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            services.Client.ApiResponse<ResourceDetail> localVarResponse = await PatchServiceResourceWithHttpInfoAsync(serviceId, resourceId, updateResourceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Service Resource by ID 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="resourceId"></param>
        /// <param name="updateResourceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceDetail)</returns>
        public async System.Threading.Tasks.Task<services.Client.ApiResponse<ResourceDetail>> PatchServiceResourceWithHttpInfoAsync(long serviceId, long resourceId, UpdateResourceRequest updateResourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateResourceRequest' is set
            if (updateResourceRequest == null)
            {
                throw new services.Client.ApiException(400, "Missing required parameter 'updateResourceRequest' when calling DefaultApi->PatchServiceResource");
            }


            services.Client.RequestOptions localVarRequestOptions = new services.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = services.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = services.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("serviceId", services.Client.ClientUtils.ParameterToString(serviceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("resourceId", services.Client.ClientUtils.ParameterToString(resourceId)); // path parameter
            localVarRequestOptions.Data = updateResourceRequest;

            localVarRequestOptions.Operation = "DefaultApi.PatchServiceResource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ResourceDetail>("/edge_services/{serviceId}/resources/{resourceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchServiceResource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Service Resource 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="createResourceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResourceDetail</returns>
        public ResourceDetail PostResource(long serviceId, CreateResourceRequest createResourceRequest, int operationIndex = 0)
        {
            services.Client.ApiResponse<ResourceDetail> localVarResponse = PostResourceWithHttpInfo(serviceId, createResourceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Service Resource 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="createResourceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResourceDetail</returns>
        public services.Client.ApiResponse<ResourceDetail> PostResourceWithHttpInfo(long serviceId, CreateResourceRequest createResourceRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createResourceRequest' is set
            if (createResourceRequest == null)
            {
                throw new services.Client.ApiException(400, "Missing required parameter 'createResourceRequest' when calling DefaultApi->PostResource");
            }

            services.Client.RequestOptions localVarRequestOptions = new services.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = services.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = services.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("serviceId", services.Client.ClientUtils.ParameterToString(serviceId)); // path parameter
            localVarRequestOptions.Data = createResourceRequest;

            localVarRequestOptions.Operation = "DefaultApi.PostResource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ResourceDetail>("/edge_services/{serviceId}/resources", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostResource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Service Resource 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="createResourceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceDetail</returns>
        public async System.Threading.Tasks.Task<ResourceDetail> PostResourceAsync(long serviceId, CreateResourceRequest createResourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            services.Client.ApiResponse<ResourceDetail> localVarResponse = await PostResourceWithHttpInfoAsync(serviceId, createResourceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Service Resource 
        /// </summary>
        /// <exception cref="services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="createResourceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceDetail)</returns>
        public async System.Threading.Tasks.Task<services.Client.ApiResponse<ResourceDetail>> PostResourceWithHttpInfoAsync(long serviceId, CreateResourceRequest createResourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createResourceRequest' is set
            if (createResourceRequest == null)
            {
                throw new services.Client.ApiException(400, "Missing required parameter 'createResourceRequest' when calling DefaultApi->PostResource");
            }


            services.Client.RequestOptions localVarRequestOptions = new services.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = services.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = services.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("serviceId", services.Client.ClientUtils.ParameterToString(serviceId)); // path parameter
            localVarRequestOptions.Data = createResourceRequest;

            localVarRequestOptions.Operation = "DefaultApi.PostResource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ResourceDetail>("/edge_services/{serviceId}/resources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostResource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
