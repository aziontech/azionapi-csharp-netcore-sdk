/*
 * Services API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = services.Client.OpenAPIDateConverter;

namespace services.Model
{
    /// <summary>
    /// ServiceResponse
    /// </summary>
    [DataContract(Name = "ServiceResponse")]
    public partial class ServiceResponse : IEquatable<ServiceResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ServiceResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceResponse" /> class.
        /// </summary>
        /// <param name="active">active (required).</param>
        /// <param name="boundNodes">boundNodes (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="lastEditor">lastEditor (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="permissions">permissions (required).</param>
        /// <param name="updatedAt">updatedAt (required).</param>
        /// <param name="variables">variables.</param>
        public ServiceResponse(bool active = default(bool), long boundNodes = default(long), long id = default(long), string lastEditor = default(string), string name = default(string), List<string> permissions = default(List<string>), string updatedAt = default(string), List<Variable> variables = default(List<Variable>))
        {
            this.Active = active;
            this.BoundNodes = boundNodes;
            this.Id = id;
            // to ensure "lastEditor" is required (not null)
            if (lastEditor == null)
            {
                throw new ArgumentNullException("lastEditor is a required property for ServiceResponse and cannot be null");
            }
            this.LastEditor = lastEditor;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ServiceResponse and cannot be null");
            }
            this.Name = name;
            // to ensure "permissions" is required (not null)
            if (permissions == null)
            {
                throw new ArgumentNullException("permissions is a required property for ServiceResponse and cannot be null");
            }
            this.Permissions = permissions;
            // to ensure "updatedAt" is required (not null)
            if (updatedAt == null)
            {
                throw new ArgumentNullException("updatedAt is a required property for ServiceResponse and cannot be null");
            }
            this.UpdatedAt = updatedAt;
            this.Variables = variables;
        }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", IsRequired = true, EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets BoundNodes
        /// </summary>
        [DataMember(Name = "bound_nodes", IsRequired = true, EmitDefaultValue = true)]
        public long BoundNodes { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets LastEditor
        /// </summary>
        [DataMember(Name = "last_editor", IsRequired = true, EmitDefaultValue = true)]
        public string LastEditor { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [DataMember(Name = "permissions", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Permissions { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", IsRequired = true, EmitDefaultValue = true)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Variables
        /// </summary>
        [DataMember(Name = "variables", EmitDefaultValue = false)]
        public List<Variable> Variables { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServiceResponse {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  BoundNodes: ").Append(BoundNodes).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastEditor: ").Append(LastEditor).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Variables: ").Append(Variables).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServiceResponse);
        }

        /// <summary>
        /// Returns true if ServiceResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ServiceResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.BoundNodes == input.BoundNodes ||
                    this.BoundNodes.Equals(input.BoundNodes)
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.LastEditor == input.LastEditor ||
                    (this.LastEditor != null &&
                    this.LastEditor.Equals(input.LastEditor))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Permissions == input.Permissions ||
                    this.Permissions != null &&
                    input.Permissions != null &&
                    this.Permissions.SequenceEqual(input.Permissions)
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Variables == input.Variables ||
                    this.Variables != null &&
                    input.Variables != null &&
                    this.Variables.SequenceEqual(input.Variables)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                hashCode = (hashCode * 59) + this.BoundNodes.GetHashCode();
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.LastEditor != null)
                {
                    hashCode = (hashCode * 59) + this.LastEditor.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Permissions != null)
                {
                    hashCode = (hashCode * 59) + this.Permissions.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.Variables != null)
                {
                    hashCode = (hashCode * 59) + this.Variables.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
