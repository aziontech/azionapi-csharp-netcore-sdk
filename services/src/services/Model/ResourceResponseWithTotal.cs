/*
 * Services API
 *
 * Azion Services
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = services.Client.OpenAPIDateConverter;

namespace services.Model
{
    /// <summary>
    /// ResourceResponseWithTotal
    /// </summary>
    [DataContract(Name = "ResourceResponseWithTotal")]
    public partial class ResourceResponseWithTotal : IEquatable<ResourceResponseWithTotal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceResponseWithTotal" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ResourceResponseWithTotal() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceResponseWithTotal" /> class.
        /// </summary>
        /// <param name="resources">resources (required).</param>
        /// <param name="total">total (required).</param>
        public ResourceResponseWithTotal(List<ResourceResponse> resources = default(List<ResourceResponse>), long total = default(long))
        {
            // to ensure "resources" is required (not null)
            if (resources == null)
            {
                throw new ArgumentNullException("resources is a required property for ResourceResponseWithTotal and cannot be null");
            }
            this.Resources = resources;
            this.Total = total;
        }

        /// <summary>
        /// Gets or Sets Resources
        /// </summary>
        [DataMember(Name = "resources", IsRequired = true, EmitDefaultValue = true)]
        public List<ResourceResponse> Resources { get; set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name = "total", IsRequired = true, EmitDefaultValue = true)]
        public long Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResourceResponseWithTotal {\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResourceResponseWithTotal);
        }

        /// <summary>
        /// Returns true if ResourceResponseWithTotal instances are equal
        /// </summary>
        /// <param name="input">Instance of ResourceResponseWithTotal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResourceResponseWithTotal input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Resources == input.Resources ||
                    this.Resources != null &&
                    input.Resources != null &&
                    this.Resources.SequenceEqual(input.Resources)
                ) && 
                (
                    this.Total == input.Total ||
                    this.Total.Equals(input.Total)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Resources != null)
                {
                    hashCode = (hashCode * 59) + this.Resources.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Total.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
