/*
 * Edge Application API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = edgeapplications.Client.OpenAPIDateConverter;

namespace edgeapplications.Model
{
    /// <summary>
    /// CreateApplicationRequest
    /// </summary>
    [DataContract(Name = "CreateApplicationRequest")]
    public partial class CreateApplicationRequest : IEquatable<CreateApplicationRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateApplicationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateApplicationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateApplicationRequest" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="applicationAcceleration">applicationAcceleration.</param>
        /// <param name="deliveryProtocol">deliveryProtocol.</param>
        /// <param name="originType">originType.</param>
        /// <param name="address">address.</param>
        /// <param name="originProtocolPolicy">originProtocolPolicy.</param>
        /// <param name="hostHeader">hostHeader.</param>
        /// <param name="browserCacheSettings">browserCacheSettings.</param>
        /// <param name="cdnCacheSettings">cdnCacheSettings.</param>
        /// <param name="browserCacheSettingsMaximumTtl">browserCacheSettingsMaximumTtl.</param>
        /// <param name="cdnCacheSettingsMaximumTtl">cdnCacheSettingsMaximumTtl.</param>
        public CreateApplicationRequest(string name = default(string), bool applicationAcceleration = default(bool), string deliveryProtocol = default(string), string originType = default(string), string address = default(string), string originProtocolPolicy = default(string), string hostHeader = default(string), string browserCacheSettings = default(string), string cdnCacheSettings = default(string), long browserCacheSettingsMaximumTtl = default(long), long cdnCacheSettingsMaximumTtl = default(long))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CreateApplicationRequest and cannot be null");
            }
            this.Name = name;
            this.ApplicationAcceleration = applicationAcceleration;
            this.DeliveryProtocol = deliveryProtocol;
            this.OriginType = originType;
            this.Address = address;
            this.OriginProtocolPolicy = originProtocolPolicy;
            this.HostHeader = hostHeader;
            this.BrowserCacheSettings = browserCacheSettings;
            this.CdnCacheSettings = cdnCacheSettings;
            this.BrowserCacheSettingsMaximumTtl = browserCacheSettingsMaximumTtl;
            this.CdnCacheSettingsMaximumTtl = cdnCacheSettingsMaximumTtl;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationAcceleration
        /// </summary>
        [DataMember(Name = "application_acceleration", EmitDefaultValue = true)]
        public bool ApplicationAcceleration { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryProtocol
        /// </summary>
        [DataMember(Name = "delivery_protocol", EmitDefaultValue = false)]
        public string DeliveryProtocol { get; set; }

        /// <summary>
        /// Gets or Sets OriginType
        /// </summary>
        [DataMember(Name = "origin_type", EmitDefaultValue = false)]
        public string OriginType { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets OriginProtocolPolicy
        /// </summary>
        [DataMember(Name = "origin_protocol_policy", EmitDefaultValue = false)]
        public string OriginProtocolPolicy { get; set; }

        /// <summary>
        /// Gets or Sets HostHeader
        /// </summary>
        [DataMember(Name = "host_header", EmitDefaultValue = false)]
        public string HostHeader { get; set; }

        /// <summary>
        /// Gets or Sets BrowserCacheSettings
        /// </summary>
        [DataMember(Name = "browser_cache_settings", EmitDefaultValue = false)]
        public string BrowserCacheSettings { get; set; }

        /// <summary>
        /// Gets or Sets CdnCacheSettings
        /// </summary>
        [DataMember(Name = "cdn_cache_settings", EmitDefaultValue = false)]
        public string CdnCacheSettings { get; set; }

        /// <summary>
        /// Gets or Sets BrowserCacheSettingsMaximumTtl
        /// </summary>
        [DataMember(Name = "browser_cache_settings_maximum_ttl", EmitDefaultValue = false)]
        public long BrowserCacheSettingsMaximumTtl { get; set; }

        /// <summary>
        /// Gets or Sets CdnCacheSettingsMaximumTtl
        /// </summary>
        [DataMember(Name = "cdn_cache_settings_maximum_ttl", EmitDefaultValue = false)]
        public long CdnCacheSettingsMaximumTtl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateApplicationRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ApplicationAcceleration: ").Append(ApplicationAcceleration).Append("\n");
            sb.Append("  DeliveryProtocol: ").Append(DeliveryProtocol).Append("\n");
            sb.Append("  OriginType: ").Append(OriginType).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  OriginProtocolPolicy: ").Append(OriginProtocolPolicy).Append("\n");
            sb.Append("  HostHeader: ").Append(HostHeader).Append("\n");
            sb.Append("  BrowserCacheSettings: ").Append(BrowserCacheSettings).Append("\n");
            sb.Append("  CdnCacheSettings: ").Append(CdnCacheSettings).Append("\n");
            sb.Append("  BrowserCacheSettingsMaximumTtl: ").Append(BrowserCacheSettingsMaximumTtl).Append("\n");
            sb.Append("  CdnCacheSettingsMaximumTtl: ").Append(CdnCacheSettingsMaximumTtl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateApplicationRequest);
        }

        /// <summary>
        /// Returns true if CreateApplicationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateApplicationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateApplicationRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ApplicationAcceleration == input.ApplicationAcceleration ||
                    this.ApplicationAcceleration.Equals(input.ApplicationAcceleration)
                ) && 
                (
                    this.DeliveryProtocol == input.DeliveryProtocol ||
                    (this.DeliveryProtocol != null &&
                    this.DeliveryProtocol.Equals(input.DeliveryProtocol))
                ) && 
                (
                    this.OriginType == input.OriginType ||
                    (this.OriginType != null &&
                    this.OriginType.Equals(input.OriginType))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.OriginProtocolPolicy == input.OriginProtocolPolicy ||
                    (this.OriginProtocolPolicy != null &&
                    this.OriginProtocolPolicy.Equals(input.OriginProtocolPolicy))
                ) && 
                (
                    this.HostHeader == input.HostHeader ||
                    (this.HostHeader != null &&
                    this.HostHeader.Equals(input.HostHeader))
                ) && 
                (
                    this.BrowserCacheSettings == input.BrowserCacheSettings ||
                    (this.BrowserCacheSettings != null &&
                    this.BrowserCacheSettings.Equals(input.BrowserCacheSettings))
                ) && 
                (
                    this.CdnCacheSettings == input.CdnCacheSettings ||
                    (this.CdnCacheSettings != null &&
                    this.CdnCacheSettings.Equals(input.CdnCacheSettings))
                ) && 
                (
                    this.BrowserCacheSettingsMaximumTtl == input.BrowserCacheSettingsMaximumTtl ||
                    this.BrowserCacheSettingsMaximumTtl.Equals(input.BrowserCacheSettingsMaximumTtl)
                ) && 
                (
                    this.CdnCacheSettingsMaximumTtl == input.CdnCacheSettingsMaximumTtl ||
                    this.CdnCacheSettingsMaximumTtl.Equals(input.CdnCacheSettingsMaximumTtl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ApplicationAcceleration.GetHashCode();
                if (this.DeliveryProtocol != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryProtocol.GetHashCode();
                }
                if (this.OriginType != null)
                {
                    hashCode = (hashCode * 59) + this.OriginType.GetHashCode();
                }
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.OriginProtocolPolicy != null)
                {
                    hashCode = (hashCode * 59) + this.OriginProtocolPolicy.GetHashCode();
                }
                if (this.HostHeader != null)
                {
                    hashCode = (hashCode * 59) + this.HostHeader.GetHashCode();
                }
                if (this.BrowserCacheSettings != null)
                {
                    hashCode = (hashCode * 59) + this.BrowserCacheSettings.GetHashCode();
                }
                if (this.CdnCacheSettings != null)
                {
                    hashCode = (hashCode * 59) + this.CdnCacheSettings.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BrowserCacheSettingsMaximumTtl.GetHashCode();
                hashCode = (hashCode * 59) + this.CdnCacheSettingsMaximumTtl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
