/*
 * Edgenode API
 *
 * Azion Orchestration
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = edgenode.Client.OpenAPIDateConverter;

namespace edgenode.Model
{
    /// <summary>
    /// EdgeNodeResponse
    /// </summary>
    [DataContract(Name = "EdgeNodeResponse")]
    public partial class EdgeNodeResponse : IEquatable<EdgeNodeResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdgeNodeResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdgeNodeResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdgeNodeResponse" /> class.
        /// </summary>
        /// <param name="groups">groups.</param>
        /// <param name="hashId">hashId.</param>
        /// <param name="id">id (required).</param>
        /// <param name="name">name.</param>
        /// <param name="status">status.</param>
        public EdgeNodeResponse(List<NodeGroup> groups = default(List<NodeGroup>), string hashId = default(string), long id = default(long), string name = default(string), string status = default(string))
        {
            this.Id = id;
            this.Groups = groups;
            this.HashId = hashId;
            this.Name = name;
            this.Status = status;
        }

        /// <summary>
        /// Gets or Sets Groups
        /// </summary>
        [DataMember(Name = "groups", EmitDefaultValue = false)]
        public List<NodeGroup> Groups { get; set; }

        /// <summary>
        /// Gets or Sets HashId
        /// </summary>
        [DataMember(Name = "hash_id", EmitDefaultValue = false)]
        public string HashId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdgeNodeResponse {\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  HashId: ").Append(HashId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdgeNodeResponse);
        }

        /// <summary>
        /// Returns true if EdgeNodeResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EdgeNodeResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdgeNodeResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Groups == input.Groups ||
                    this.Groups != null &&
                    input.Groups != null &&
                    this.Groups.SequenceEqual(input.Groups)
                ) && 
                (
                    this.HashId == input.HashId ||
                    (this.HashId != null &&
                    this.HashId.Equals(input.HashId))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Groups != null)
                {
                    hashCode = (hashCode * 59) + this.Groups.GetHashCode();
                }
                if (this.HashId != null)
                {
                    hashCode = (hashCode * 59) + this.HashId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
