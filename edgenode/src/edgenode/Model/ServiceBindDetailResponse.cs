/*
 * Edge Node API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = edgenode.Client.OpenAPIDateConverter;

namespace edgenode.Model
{
    /// <summary>
    /// ServiceBindDetailResponse
    /// </summary>
    [DataContract(Name = "ServiceBindDetailResponse")]
    public partial class ServiceBindDetailResponse : IEquatable<ServiceBindDetailResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceBindDetailResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ServiceBindDetailResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceBindDetailResponse" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="serviceId">serviceId (required).</param>
        /// <param name="serviceName">serviceName (required).</param>
        /// <param name="variables">variables (required).</param>
        public ServiceBindDetailResponse(long id = default(long), long serviceId = default(long), string serviceName = default(string), List<Variable> variables = default(List<Variable>))
        {
            this.Id = id;
            this.ServiceId = serviceId;
            // to ensure "serviceName" is required (not null)
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName is a required property for ServiceBindDetailResponse and cannot be null");
            }
            this.ServiceName = serviceName;
            // to ensure "variables" is required (not null)
            if (variables == null)
            {
                throw new ArgumentNullException("variables is a required property for ServiceBindDetailResponse and cannot be null");
            }
            this.Variables = variables;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets ServiceId
        /// </summary>
        [DataMember(Name = "service_id", IsRequired = true, EmitDefaultValue = true)]
        public long ServiceId { get; set; }

        /// <summary>
        /// Gets or Sets ServiceName
        /// </summary>
        [DataMember(Name = "service_name", IsRequired = true, EmitDefaultValue = true)]
        public string ServiceName { get; set; }

        /// <summary>
        /// Gets or Sets Variables
        /// </summary>
        [DataMember(Name = "variables", IsRequired = true, EmitDefaultValue = true)]
        public List<Variable> Variables { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServiceBindDetailResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  ServiceName: ").Append(ServiceName).Append("\n");
            sb.Append("  Variables: ").Append(Variables).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServiceBindDetailResponse);
        }

        /// <summary>
        /// Returns true if ServiceBindDetailResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ServiceBindDetailResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceBindDetailResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.ServiceId == input.ServiceId ||
                    this.ServiceId.Equals(input.ServiceId)
                ) && 
                (
                    this.ServiceName == input.ServiceName ||
                    (this.ServiceName != null &&
                    this.ServiceName.Equals(input.ServiceName))
                ) && 
                (
                    this.Variables == input.Variables ||
                    this.Variables != null &&
                    input.Variables != null &&
                    this.Variables.SequenceEqual(input.Variables)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.ServiceId.GetHashCode();
                if (this.ServiceName != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceName.GetHashCode();
                }
                if (this.Variables != null)
                {
                    hashCode = (hashCode * 59) + this.Variables.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
