/*
 * Edge Node API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using edgenode.Client;
using edgenode.Model;

namespace edgenode.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Authorize edge-node
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeEdgeNodesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AuthorizeEdgeNodesResponse</returns>
        AuthorizeEdgeNodesResponse AuthorizeEdgeNode(AuthorizeEdgeNodesRequest authorizeEdgeNodesRequest, int operationIndex = 0);

        /// <summary>
        /// Authorize edge-node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeEdgeNodesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AuthorizeEdgeNodesResponse</returns>
        ApiResponse<AuthorizeEdgeNodesResponse> AuthorizeEdgeNodeWithHttpInfo(AuthorizeEdgeNodesRequest authorizeEdgeNodesRequest, int operationIndex = 0);
        /// <summary>
        /// Create an edge-node Service association
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="serviceBindRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceBindDetailResponse</returns>
        ServiceBindDetailResponse CreateEdgeNodeSvcs(long edgenodeId, ServiceBindRequest serviceBindRequest, int operationIndex = 0);

        /// <summary>
        /// Create an edge-node Service association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="serviceBindRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceBindDetailResponse</returns>
        ApiResponse<ServiceBindDetailResponse> CreateEdgeNodeSvcsWithHttpInfo(long edgenodeId, ServiceBindRequest serviceBindRequest, int operationIndex = 0);
        /// <summary>
        /// Delete edge-node by ID
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DelEdgeNode(long edgenodeId, int operationIndex = 0);

        /// <summary>
        /// Delete edge-node by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DelEdgeNodeWithHttpInfo(long edgenodeId, int operationIndex = 0);
        /// <summary>
        /// Delete an edge-node Service association
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="bindId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DelEdgeNodeSvc(long edgenodeId, long bindId, int operationIndex = 0);

        /// <summary>
        /// Delete an edge-node Service association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="bindId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DelEdgeNodeSvcWithHttpInfo(long edgenodeId, long bindId, int operationIndex = 0);
        /// <summary>
        /// Return edge-node by ID
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdgeNodeDetailResponse</returns>
        EdgeNodeDetailResponse GetEdgeNode(long edgenodeId, int operationIndex = 0);

        /// <summary>
        /// Return edge-node by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdgeNodeDetailResponse</returns>
        ApiResponse<EdgeNodeDetailResponse> GetEdgeNodeWithHttpInfo(long edgenodeId, int operationIndex = 0);
        /// <summary>
        /// Return edge-node groups
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;NodeGroupResponse&gt;</returns>
        List<NodeGroupResponse> GetEdgeNodeGroups(int operationIndex = 0);

        /// <summary>
        /// Return edge-node groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;NodeGroupResponse&gt;</returns>
        ApiResponse<List<NodeGroupResponse>> GetEdgeNodeGroupsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Return edge-node Service association by ID
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="bindId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceBindDetailResponse</returns>
        ServiceBindDetailResponse GetEdgeNodeSvcDetail(long edgenodeId, long bindId, int operationIndex = 0);

        /// <summary>
        /// Return edge-node Service association by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="bindId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceBindDetailResponse</returns>
        ApiResponse<ServiceBindDetailResponse> GetEdgeNodeSvcDetailWithHttpInfo(long edgenodeId, long bindId, int operationIndex = 0);
        /// <summary>
        /// Return edge-node Services association
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="isBound"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceResponseWithTotal</returns>
        ServiceResponseWithTotal GetEdgeNodeSvcs(long edgenodeId, bool? isBound = default(bool?), string filter = default(string), string orderBy = default(string), string sort = default(string), long? page = default(long?), long? pageSize = default(long?), int operationIndex = 0);

        /// <summary>
        /// Return edge-node Services association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="isBound"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceResponseWithTotal</returns>
        ApiResponse<ServiceResponseWithTotal> GetEdgeNodeSvcsWithHttpInfo(long edgenodeId, bool? isBound = default(bool?), string filter = default(string), string orderBy = default(string), string sort = default(string), long? page = default(long?), long? pageSize = default(long?), int operationIndex = 0);
        /// <summary>
        /// Return edge-nodes
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="onlyIds"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdgeNodeResponseWithTotal</returns>
        EdgeNodeResponseWithTotal GetEdgeNodes(string filter = default(string), string orderBy = default(string), string sort = default(string), bool? onlyIds = default(bool?), long? pageSize = default(long?), int operationIndex = 0);

        /// <summary>
        /// Return edge-nodes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="onlyIds"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdgeNodeResponseWithTotal</returns>
        ApiResponse<EdgeNodeResponseWithTotal> GetEdgeNodesWithHttpInfo(string filter = default(string), string orderBy = default(string), string sort = default(string), bool? onlyIds = default(bool?), long? pageSize = default(long?), int operationIndex = 0);
        /// <summary>
        /// Update edge-node
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateEdgeNodeResponse</returns>
        UpdateEdgeNodeResponse UpdateEdgeNode(long edgenodeId, int operationIndex = 0);

        /// <summary>
        /// Update edge-node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateEdgeNodeResponse</returns>
        ApiResponse<UpdateEdgeNodeResponse> UpdateEdgeNodeWithHttpInfo(long edgenodeId, int operationIndex = 0);
        /// <summary>
        /// Update edge-node Service association by ID
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="bindId"></param>
        /// <param name="updateServiceBindRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceBindDetailResponse</returns>
        ServiceBindDetailResponse UpdateEdgeNodeSvcDetail(long edgenodeId, long bindId, UpdateServiceBindRequest updateServiceBindRequest, int operationIndex = 0);

        /// <summary>
        /// Update edge-node Service association by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="bindId"></param>
        /// <param name="updateServiceBindRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceBindDetailResponse</returns>
        ApiResponse<ServiceBindDetailResponse> UpdateEdgeNodeSvcDetailWithHttpInfo(long edgenodeId, long bindId, UpdateServiceBindRequest updateServiceBindRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Authorize edge-node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeEdgeNodesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthorizeEdgeNodesResponse</returns>
        System.Threading.Tasks.Task<AuthorizeEdgeNodesResponse> AuthorizeEdgeNodeAsync(AuthorizeEdgeNodesRequest authorizeEdgeNodesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Authorize edge-node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeEdgeNodesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthorizeEdgeNodesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthorizeEdgeNodesResponse>> AuthorizeEdgeNodeWithHttpInfoAsync(AuthorizeEdgeNodesRequest authorizeEdgeNodesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create an edge-node Service association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="serviceBindRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceBindDetailResponse</returns>
        System.Threading.Tasks.Task<ServiceBindDetailResponse> CreateEdgeNodeSvcsAsync(long edgenodeId, ServiceBindRequest serviceBindRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create an edge-node Service association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="serviceBindRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceBindDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceBindDetailResponse>> CreateEdgeNodeSvcsWithHttpInfoAsync(long edgenodeId, ServiceBindRequest serviceBindRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete edge-node by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DelEdgeNodeAsync(long edgenodeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete edge-node by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DelEdgeNodeWithHttpInfoAsync(long edgenodeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an edge-node Service association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="bindId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DelEdgeNodeSvcAsync(long edgenodeId, long bindId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete an edge-node Service association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="bindId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DelEdgeNodeSvcWithHttpInfoAsync(long edgenodeId, long bindId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return edge-node by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdgeNodeDetailResponse</returns>
        System.Threading.Tasks.Task<EdgeNodeDetailResponse> GetEdgeNodeAsync(long edgenodeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return edge-node by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdgeNodeDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdgeNodeDetailResponse>> GetEdgeNodeWithHttpInfoAsync(long edgenodeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return edge-node groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;NodeGroupResponse&gt;</returns>
        System.Threading.Tasks.Task<List<NodeGroupResponse>> GetEdgeNodeGroupsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return edge-node groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;NodeGroupResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NodeGroupResponse>>> GetEdgeNodeGroupsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return edge-node Service association by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="bindId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceBindDetailResponse</returns>
        System.Threading.Tasks.Task<ServiceBindDetailResponse> GetEdgeNodeSvcDetailAsync(long edgenodeId, long bindId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return edge-node Service association by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="bindId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceBindDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceBindDetailResponse>> GetEdgeNodeSvcDetailWithHttpInfoAsync(long edgenodeId, long bindId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return edge-node Services association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="isBound"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceResponseWithTotal</returns>
        System.Threading.Tasks.Task<ServiceResponseWithTotal> GetEdgeNodeSvcsAsync(long edgenodeId, bool? isBound = default(bool?), string filter = default(string), string orderBy = default(string), string sort = default(string), long? page = default(long?), long? pageSize = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return edge-node Services association
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="isBound"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceResponseWithTotal)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceResponseWithTotal>> GetEdgeNodeSvcsWithHttpInfoAsync(long edgenodeId, bool? isBound = default(bool?), string filter = default(string), string orderBy = default(string), string sort = default(string), long? page = default(long?), long? pageSize = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return edge-nodes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="onlyIds"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdgeNodeResponseWithTotal</returns>
        System.Threading.Tasks.Task<EdgeNodeResponseWithTotal> GetEdgeNodesAsync(string filter = default(string), string orderBy = default(string), string sort = default(string), bool? onlyIds = default(bool?), long? pageSize = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return edge-nodes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="onlyIds"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdgeNodeResponseWithTotal)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdgeNodeResponseWithTotal>> GetEdgeNodesWithHttpInfoAsync(string filter = default(string), string orderBy = default(string), string sort = default(string), bool? onlyIds = default(bool?), long? pageSize = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update edge-node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateEdgeNodeResponse</returns>
        System.Threading.Tasks.Task<UpdateEdgeNodeResponse> UpdateEdgeNodeAsync(long edgenodeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update edge-node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateEdgeNodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateEdgeNodeResponse>> UpdateEdgeNodeWithHttpInfoAsync(long edgenodeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update edge-node Service association by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="bindId"></param>
        /// <param name="updateServiceBindRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceBindDetailResponse</returns>
        System.Threading.Tasks.Task<ServiceBindDetailResponse> UpdateEdgeNodeSvcDetailAsync(long edgenodeId, long bindId, UpdateServiceBindRequest updateServiceBindRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update edge-node Service association by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="bindId"></param>
        /// <param name="updateServiceBindRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceBindDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceBindDetailResponse>> UpdateEdgeNodeSvcDetailWithHttpInfoAsync(long edgenodeId, long bindId, UpdateServiceBindRequest updateServiceBindRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private edgenode.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            this.Configuration = edgenode.Client.Configuration.MergeConfigurations(
                edgenode.Client.GlobalConfiguration.Instance,
                new edgenode.Client.Configuration { BasePath = basePath }
            );
            this.Client = new edgenode.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new edgenode.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = edgenode.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(edgenode.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = edgenode.Client.Configuration.MergeConfigurations(
                edgenode.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new edgenode.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new edgenode.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = edgenode.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(edgenode.Client.ISynchronousClient client, edgenode.Client.IAsynchronousClient asyncClient, edgenode.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = edgenode.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public edgenode.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public edgenode.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public edgenode.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public edgenode.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Authorize edge-node 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeEdgeNodesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AuthorizeEdgeNodesResponse</returns>
        public AuthorizeEdgeNodesResponse AuthorizeEdgeNode(AuthorizeEdgeNodesRequest authorizeEdgeNodesRequest, int operationIndex = 0)
        {
            edgenode.Client.ApiResponse<AuthorizeEdgeNodesResponse> localVarResponse = AuthorizeEdgeNodeWithHttpInfo(authorizeEdgeNodesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Authorize edge-node 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeEdgeNodesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AuthorizeEdgeNodesResponse</returns>
        public edgenode.Client.ApiResponse<AuthorizeEdgeNodesResponse> AuthorizeEdgeNodeWithHttpInfo(AuthorizeEdgeNodesRequest authorizeEdgeNodesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'authorizeEdgeNodesRequest' is set
            if (authorizeEdgeNodesRequest == null)
            {
                throw new edgenode.Client.ApiException(400, "Missing required parameter 'authorizeEdgeNodesRequest' when calling DefaultApi->AuthorizeEdgeNode");
            }

            edgenode.Client.RequestOptions localVarRequestOptions = new edgenode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; version=3"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = edgenode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgenode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = authorizeEdgeNodesRequest;

            localVarRequestOptions.Operation = "DefaultApi.AuthorizeEdgeNode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<AuthorizeEdgeNodesResponse>("/edge_nodes/authorize", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthorizeEdgeNode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Authorize edge-node 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeEdgeNodesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthorizeEdgeNodesResponse</returns>
        public async System.Threading.Tasks.Task<AuthorizeEdgeNodesResponse> AuthorizeEdgeNodeAsync(AuthorizeEdgeNodesRequest authorizeEdgeNodesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            edgenode.Client.ApiResponse<AuthorizeEdgeNodesResponse> localVarResponse = await AuthorizeEdgeNodeWithHttpInfoAsync(authorizeEdgeNodesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Authorize edge-node 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeEdgeNodesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthorizeEdgeNodesResponse)</returns>
        public async System.Threading.Tasks.Task<edgenode.Client.ApiResponse<AuthorizeEdgeNodesResponse>> AuthorizeEdgeNodeWithHttpInfoAsync(AuthorizeEdgeNodesRequest authorizeEdgeNodesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorizeEdgeNodesRequest' is set
            if (authorizeEdgeNodesRequest == null)
            {
                throw new edgenode.Client.ApiException(400, "Missing required parameter 'authorizeEdgeNodesRequest' when calling DefaultApi->AuthorizeEdgeNode");
            }


            edgenode.Client.RequestOptions localVarRequestOptions = new edgenode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; version=3"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = edgenode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgenode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = authorizeEdgeNodesRequest;

            localVarRequestOptions.Operation = "DefaultApi.AuthorizeEdgeNode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<AuthorizeEdgeNodesResponse>("/edge_nodes/authorize", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthorizeEdgeNode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an edge-node Service association 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="serviceBindRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceBindDetailResponse</returns>
        public ServiceBindDetailResponse CreateEdgeNodeSvcs(long edgenodeId, ServiceBindRequest serviceBindRequest, int operationIndex = 0)
        {
            edgenode.Client.ApiResponse<ServiceBindDetailResponse> localVarResponse = CreateEdgeNodeSvcsWithHttpInfo(edgenodeId, serviceBindRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an edge-node Service association 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="serviceBindRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceBindDetailResponse</returns>
        public edgenode.Client.ApiResponse<ServiceBindDetailResponse> CreateEdgeNodeSvcsWithHttpInfo(long edgenodeId, ServiceBindRequest serviceBindRequest, int operationIndex = 0)
        {
            // verify the required parameter 'serviceBindRequest' is set
            if (serviceBindRequest == null)
            {
                throw new edgenode.Client.ApiException(400, "Missing required parameter 'serviceBindRequest' when calling DefaultApi->CreateEdgeNodeSvcs");
            }

            edgenode.Client.RequestOptions localVarRequestOptions = new edgenode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; version=3"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = edgenode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgenode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("edgenodeId", edgenode.Client.ClientUtils.ParameterToString(edgenodeId)); // path parameter
            localVarRequestOptions.Data = serviceBindRequest;

            localVarRequestOptions.Operation = "DefaultApi.CreateEdgeNodeSvcs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ServiceBindDetailResponse>("/edge_nodes/{edgenodeId}/services", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEdgeNodeSvcs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an edge-node Service association 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="serviceBindRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceBindDetailResponse</returns>
        public async System.Threading.Tasks.Task<ServiceBindDetailResponse> CreateEdgeNodeSvcsAsync(long edgenodeId, ServiceBindRequest serviceBindRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            edgenode.Client.ApiResponse<ServiceBindDetailResponse> localVarResponse = await CreateEdgeNodeSvcsWithHttpInfoAsync(edgenodeId, serviceBindRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an edge-node Service association 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="serviceBindRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceBindDetailResponse)</returns>
        public async System.Threading.Tasks.Task<edgenode.Client.ApiResponse<ServiceBindDetailResponse>> CreateEdgeNodeSvcsWithHttpInfoAsync(long edgenodeId, ServiceBindRequest serviceBindRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'serviceBindRequest' is set
            if (serviceBindRequest == null)
            {
                throw new edgenode.Client.ApiException(400, "Missing required parameter 'serviceBindRequest' when calling DefaultApi->CreateEdgeNodeSvcs");
            }


            edgenode.Client.RequestOptions localVarRequestOptions = new edgenode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; version=3"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = edgenode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgenode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("edgenodeId", edgenode.Client.ClientUtils.ParameterToString(edgenodeId)); // path parameter
            localVarRequestOptions.Data = serviceBindRequest;

            localVarRequestOptions.Operation = "DefaultApi.CreateEdgeNodeSvcs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ServiceBindDetailResponse>("/edge_nodes/{edgenodeId}/services", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEdgeNodeSvcs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete edge-node by ID 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DelEdgeNode(long edgenodeId, int operationIndex = 0)
        {
            DelEdgeNodeWithHttpInfo(edgenodeId);
        }

        /// <summary>
        /// Delete edge-node by ID 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public edgenode.Client.ApiResponse<Object> DelEdgeNodeWithHttpInfo(long edgenodeId, int operationIndex = 0)
        {
            edgenode.Client.RequestOptions localVarRequestOptions = new edgenode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = edgenode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgenode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("edgenodeId", edgenode.Client.ClientUtils.ParameterToString(edgenodeId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.DelEdgeNode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/edge_nodes/{edgenodeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DelEdgeNode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete edge-node by ID 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DelEdgeNodeAsync(long edgenodeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DelEdgeNodeWithHttpInfoAsync(edgenodeId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete edge-node by ID 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<edgenode.Client.ApiResponse<Object>> DelEdgeNodeWithHttpInfoAsync(long edgenodeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            edgenode.Client.RequestOptions localVarRequestOptions = new edgenode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = edgenode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgenode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("edgenodeId", edgenode.Client.ClientUtils.ParameterToString(edgenodeId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.DelEdgeNode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/edge_nodes/{edgenodeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DelEdgeNode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an edge-node Service association 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="bindId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DelEdgeNodeSvc(long edgenodeId, long bindId, int operationIndex = 0)
        {
            DelEdgeNodeSvcWithHttpInfo(edgenodeId, bindId);
        }

        /// <summary>
        /// Delete an edge-node Service association 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="bindId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public edgenode.Client.ApiResponse<Object> DelEdgeNodeSvcWithHttpInfo(long edgenodeId, long bindId, int operationIndex = 0)
        {
            edgenode.Client.RequestOptions localVarRequestOptions = new edgenode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = edgenode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgenode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("edgenodeId", edgenode.Client.ClientUtils.ParameterToString(edgenodeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("bindId", edgenode.Client.ClientUtils.ParameterToString(bindId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.DelEdgeNodeSvc";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/edge_nodes/{edgenodeId}/services/{bindId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DelEdgeNodeSvc", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an edge-node Service association 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="bindId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DelEdgeNodeSvcAsync(long edgenodeId, long bindId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DelEdgeNodeSvcWithHttpInfoAsync(edgenodeId, bindId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an edge-node Service association 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="bindId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<edgenode.Client.ApiResponse<Object>> DelEdgeNodeSvcWithHttpInfoAsync(long edgenodeId, long bindId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            edgenode.Client.RequestOptions localVarRequestOptions = new edgenode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = edgenode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgenode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("edgenodeId", edgenode.Client.ClientUtils.ParameterToString(edgenodeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("bindId", edgenode.Client.ClientUtils.ParameterToString(bindId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.DelEdgeNodeSvc";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/edge_nodes/{edgenodeId}/services/{bindId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DelEdgeNodeSvc", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return edge-node by ID 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdgeNodeDetailResponse</returns>
        public EdgeNodeDetailResponse GetEdgeNode(long edgenodeId, int operationIndex = 0)
        {
            edgenode.Client.ApiResponse<EdgeNodeDetailResponse> localVarResponse = GetEdgeNodeWithHttpInfo(edgenodeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return edge-node by ID 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdgeNodeDetailResponse</returns>
        public edgenode.Client.ApiResponse<EdgeNodeDetailResponse> GetEdgeNodeWithHttpInfo(long edgenodeId, int operationIndex = 0)
        {
            edgenode.Client.RequestOptions localVarRequestOptions = new edgenode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = edgenode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgenode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("edgenodeId", edgenode.Client.ClientUtils.ParameterToString(edgenodeId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetEdgeNode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EdgeNodeDetailResponse>("/edge_nodes/{edgenodeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEdgeNode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return edge-node by ID 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdgeNodeDetailResponse</returns>
        public async System.Threading.Tasks.Task<EdgeNodeDetailResponse> GetEdgeNodeAsync(long edgenodeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            edgenode.Client.ApiResponse<EdgeNodeDetailResponse> localVarResponse = await GetEdgeNodeWithHttpInfoAsync(edgenodeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return edge-node by ID 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdgeNodeDetailResponse)</returns>
        public async System.Threading.Tasks.Task<edgenode.Client.ApiResponse<EdgeNodeDetailResponse>> GetEdgeNodeWithHttpInfoAsync(long edgenodeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            edgenode.Client.RequestOptions localVarRequestOptions = new edgenode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = edgenode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgenode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("edgenodeId", edgenode.Client.ClientUtils.ParameterToString(edgenodeId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetEdgeNode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EdgeNodeDetailResponse>("/edge_nodes/{edgenodeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEdgeNode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return edge-node groups 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;NodeGroupResponse&gt;</returns>
        public List<NodeGroupResponse> GetEdgeNodeGroups(int operationIndex = 0)
        {
            edgenode.Client.ApiResponse<List<NodeGroupResponse>> localVarResponse = GetEdgeNodeGroupsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return edge-node groups 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;NodeGroupResponse&gt;</returns>
        public edgenode.Client.ApiResponse<List<NodeGroupResponse>> GetEdgeNodeGroupsWithHttpInfo(int operationIndex = 0)
        {
            edgenode.Client.RequestOptions localVarRequestOptions = new edgenode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = edgenode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgenode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetEdgeNodeGroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<NodeGroupResponse>>("/edge_nodes/groups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEdgeNodeGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return edge-node groups 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;NodeGroupResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<NodeGroupResponse>> GetEdgeNodeGroupsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            edgenode.Client.ApiResponse<List<NodeGroupResponse>> localVarResponse = await GetEdgeNodeGroupsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return edge-node groups 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;NodeGroupResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<edgenode.Client.ApiResponse<List<NodeGroupResponse>>> GetEdgeNodeGroupsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            edgenode.Client.RequestOptions localVarRequestOptions = new edgenode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = edgenode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgenode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetEdgeNodeGroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<NodeGroupResponse>>("/edge_nodes/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEdgeNodeGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return edge-node Service association by ID 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="bindId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceBindDetailResponse</returns>
        public ServiceBindDetailResponse GetEdgeNodeSvcDetail(long edgenodeId, long bindId, int operationIndex = 0)
        {
            edgenode.Client.ApiResponse<ServiceBindDetailResponse> localVarResponse = GetEdgeNodeSvcDetailWithHttpInfo(edgenodeId, bindId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return edge-node Service association by ID 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="bindId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceBindDetailResponse</returns>
        public edgenode.Client.ApiResponse<ServiceBindDetailResponse> GetEdgeNodeSvcDetailWithHttpInfo(long edgenodeId, long bindId, int operationIndex = 0)
        {
            edgenode.Client.RequestOptions localVarRequestOptions = new edgenode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = edgenode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgenode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("edgenodeId", edgenode.Client.ClientUtils.ParameterToString(edgenodeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("bindId", edgenode.Client.ClientUtils.ParameterToString(bindId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetEdgeNodeSvcDetail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceBindDetailResponse>("/edge_nodes/{edgenodeId}/services/{bindId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEdgeNodeSvcDetail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return edge-node Service association by ID 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="bindId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceBindDetailResponse</returns>
        public async System.Threading.Tasks.Task<ServiceBindDetailResponse> GetEdgeNodeSvcDetailAsync(long edgenodeId, long bindId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            edgenode.Client.ApiResponse<ServiceBindDetailResponse> localVarResponse = await GetEdgeNodeSvcDetailWithHttpInfoAsync(edgenodeId, bindId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return edge-node Service association by ID 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="bindId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceBindDetailResponse)</returns>
        public async System.Threading.Tasks.Task<edgenode.Client.ApiResponse<ServiceBindDetailResponse>> GetEdgeNodeSvcDetailWithHttpInfoAsync(long edgenodeId, long bindId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            edgenode.Client.RequestOptions localVarRequestOptions = new edgenode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = edgenode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgenode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("edgenodeId", edgenode.Client.ClientUtils.ParameterToString(edgenodeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("bindId", edgenode.Client.ClientUtils.ParameterToString(bindId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetEdgeNodeSvcDetail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceBindDetailResponse>("/edge_nodes/{edgenodeId}/services/{bindId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEdgeNodeSvcDetail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return edge-node Services association 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="isBound"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceResponseWithTotal</returns>
        public ServiceResponseWithTotal GetEdgeNodeSvcs(long edgenodeId, bool? isBound = default(bool?), string filter = default(string), string orderBy = default(string), string sort = default(string), long? page = default(long?), long? pageSize = default(long?), int operationIndex = 0)
        {
            edgenode.Client.ApiResponse<ServiceResponseWithTotal> localVarResponse = GetEdgeNodeSvcsWithHttpInfo(edgenodeId, isBound, filter, orderBy, sort, page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return edge-node Services association 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="isBound"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceResponseWithTotal</returns>
        public edgenode.Client.ApiResponse<ServiceResponseWithTotal> GetEdgeNodeSvcsWithHttpInfo(long edgenodeId, bool? isBound = default(bool?), string filter = default(string), string orderBy = default(string), string sort = default(string), long? page = default(long?), long? pageSize = default(long?), int operationIndex = 0)
        {
            edgenode.Client.RequestOptions localVarRequestOptions = new edgenode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = edgenode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgenode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("edgenodeId", edgenode.Client.ClientUtils.ParameterToString(edgenodeId)); // path parameter
            if (isBound != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgenode.Client.ClientUtils.ParameterToMultiMap("", "is_bound", isBound));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgenode.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgenode.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgenode.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgenode.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgenode.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetEdgeNodeSvcs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceResponseWithTotal>("/edge_nodes/{edgenodeId}/services", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEdgeNodeSvcs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return edge-node Services association 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="isBound"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceResponseWithTotal</returns>
        public async System.Threading.Tasks.Task<ServiceResponseWithTotal> GetEdgeNodeSvcsAsync(long edgenodeId, bool? isBound = default(bool?), string filter = default(string), string orderBy = default(string), string sort = default(string), long? page = default(long?), long? pageSize = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            edgenode.Client.ApiResponse<ServiceResponseWithTotal> localVarResponse = await GetEdgeNodeSvcsWithHttpInfoAsync(edgenodeId, isBound, filter, orderBy, sort, page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return edge-node Services association 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="isBound"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceResponseWithTotal)</returns>
        public async System.Threading.Tasks.Task<edgenode.Client.ApiResponse<ServiceResponseWithTotal>> GetEdgeNodeSvcsWithHttpInfoAsync(long edgenodeId, bool? isBound = default(bool?), string filter = default(string), string orderBy = default(string), string sort = default(string), long? page = default(long?), long? pageSize = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            edgenode.Client.RequestOptions localVarRequestOptions = new edgenode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = edgenode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgenode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("edgenodeId", edgenode.Client.ClientUtils.ParameterToString(edgenodeId)); // path parameter
            if (isBound != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgenode.Client.ClientUtils.ParameterToMultiMap("", "is_bound", isBound));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgenode.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgenode.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgenode.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgenode.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgenode.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetEdgeNodeSvcs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceResponseWithTotal>("/edge_nodes/{edgenodeId}/services", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEdgeNodeSvcs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return edge-nodes 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="onlyIds"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdgeNodeResponseWithTotal</returns>
        public EdgeNodeResponseWithTotal GetEdgeNodes(string filter = default(string), string orderBy = default(string), string sort = default(string), bool? onlyIds = default(bool?), long? pageSize = default(long?), int operationIndex = 0)
        {
            edgenode.Client.ApiResponse<EdgeNodeResponseWithTotal> localVarResponse = GetEdgeNodesWithHttpInfo(filter, orderBy, sort, onlyIds, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return edge-nodes 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="onlyIds"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdgeNodeResponseWithTotal</returns>
        public edgenode.Client.ApiResponse<EdgeNodeResponseWithTotal> GetEdgeNodesWithHttpInfo(string filter = default(string), string orderBy = default(string), string sort = default(string), bool? onlyIds = default(bool?), long? pageSize = default(long?), int operationIndex = 0)
        {
            edgenode.Client.RequestOptions localVarRequestOptions = new edgenode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = edgenode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgenode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgenode.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgenode.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgenode.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (onlyIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgenode.Client.ClientUtils.ParameterToMultiMap("", "only_ids", onlyIds));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgenode.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetEdgeNodes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EdgeNodeResponseWithTotal>("/edge_nodes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEdgeNodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return edge-nodes 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="onlyIds"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdgeNodeResponseWithTotal</returns>
        public async System.Threading.Tasks.Task<EdgeNodeResponseWithTotal> GetEdgeNodesAsync(string filter = default(string), string orderBy = default(string), string sort = default(string), bool? onlyIds = default(bool?), long? pageSize = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            edgenode.Client.ApiResponse<EdgeNodeResponseWithTotal> localVarResponse = await GetEdgeNodesWithHttpInfoAsync(filter, orderBy, sort, onlyIds, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return edge-nodes 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="onlyIds"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdgeNodeResponseWithTotal)</returns>
        public async System.Threading.Tasks.Task<edgenode.Client.ApiResponse<EdgeNodeResponseWithTotal>> GetEdgeNodesWithHttpInfoAsync(string filter = default(string), string orderBy = default(string), string sort = default(string), bool? onlyIds = default(bool?), long? pageSize = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            edgenode.Client.RequestOptions localVarRequestOptions = new edgenode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = edgenode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgenode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgenode.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgenode.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgenode.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (onlyIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgenode.Client.ClientUtils.ParameterToMultiMap("", "only_ids", onlyIds));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgenode.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetEdgeNodes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EdgeNodeResponseWithTotal>("/edge_nodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEdgeNodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update edge-node 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateEdgeNodeResponse</returns>
        public UpdateEdgeNodeResponse UpdateEdgeNode(long edgenodeId, int operationIndex = 0)
        {
            edgenode.Client.ApiResponse<UpdateEdgeNodeResponse> localVarResponse = UpdateEdgeNodeWithHttpInfo(edgenodeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update edge-node 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateEdgeNodeResponse</returns>
        public edgenode.Client.ApiResponse<UpdateEdgeNodeResponse> UpdateEdgeNodeWithHttpInfo(long edgenodeId, int operationIndex = 0)
        {
            edgenode.Client.RequestOptions localVarRequestOptions = new edgenode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = edgenode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgenode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("edgenodeId", edgenode.Client.ClientUtils.ParameterToString(edgenodeId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.UpdateEdgeNode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateEdgeNodeResponse>("/edge_nodes/{edgenodeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEdgeNode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update edge-node 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateEdgeNodeResponse</returns>
        public async System.Threading.Tasks.Task<UpdateEdgeNodeResponse> UpdateEdgeNodeAsync(long edgenodeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            edgenode.Client.ApiResponse<UpdateEdgeNodeResponse> localVarResponse = await UpdateEdgeNodeWithHttpInfoAsync(edgenodeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update edge-node 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateEdgeNodeResponse)</returns>
        public async System.Threading.Tasks.Task<edgenode.Client.ApiResponse<UpdateEdgeNodeResponse>> UpdateEdgeNodeWithHttpInfoAsync(long edgenodeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            edgenode.Client.RequestOptions localVarRequestOptions = new edgenode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = edgenode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgenode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("edgenodeId", edgenode.Client.ClientUtils.ParameterToString(edgenodeId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.UpdateEdgeNode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateEdgeNodeResponse>("/edge_nodes/{edgenodeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEdgeNode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update edge-node Service association by ID 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="bindId"></param>
        /// <param name="updateServiceBindRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceBindDetailResponse</returns>
        public ServiceBindDetailResponse UpdateEdgeNodeSvcDetail(long edgenodeId, long bindId, UpdateServiceBindRequest updateServiceBindRequest, int operationIndex = 0)
        {
            edgenode.Client.ApiResponse<ServiceBindDetailResponse> localVarResponse = UpdateEdgeNodeSvcDetailWithHttpInfo(edgenodeId, bindId, updateServiceBindRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update edge-node Service association by ID 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="bindId"></param>
        /// <param name="updateServiceBindRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceBindDetailResponse</returns>
        public edgenode.Client.ApiResponse<ServiceBindDetailResponse> UpdateEdgeNodeSvcDetailWithHttpInfo(long edgenodeId, long bindId, UpdateServiceBindRequest updateServiceBindRequest, int operationIndex = 0)
        {
            // verify the required parameter 'updateServiceBindRequest' is set
            if (updateServiceBindRequest == null)
            {
                throw new edgenode.Client.ApiException(400, "Missing required parameter 'updateServiceBindRequest' when calling DefaultApi->UpdateEdgeNodeSvcDetail");
            }

            edgenode.Client.RequestOptions localVarRequestOptions = new edgenode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; version=3"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = edgenode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgenode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("edgenodeId", edgenode.Client.ClientUtils.ParameterToString(edgenodeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("bindId", edgenode.Client.ClientUtils.ParameterToString(bindId)); // path parameter
            localVarRequestOptions.Data = updateServiceBindRequest;

            localVarRequestOptions.Operation = "DefaultApi.UpdateEdgeNodeSvcDetail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ServiceBindDetailResponse>("/edge_nodes/{edgenodeId}/services/{bindId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEdgeNodeSvcDetail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update edge-node Service association by ID 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="bindId"></param>
        /// <param name="updateServiceBindRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceBindDetailResponse</returns>
        public async System.Threading.Tasks.Task<ServiceBindDetailResponse> UpdateEdgeNodeSvcDetailAsync(long edgenodeId, long bindId, UpdateServiceBindRequest updateServiceBindRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            edgenode.Client.ApiResponse<ServiceBindDetailResponse> localVarResponse = await UpdateEdgeNodeSvcDetailWithHttpInfoAsync(edgenodeId, bindId, updateServiceBindRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update edge-node Service association by ID 
        /// </summary>
        /// <exception cref="edgenode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgenodeId"></param>
        /// <param name="bindId"></param>
        /// <param name="updateServiceBindRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceBindDetailResponse)</returns>
        public async System.Threading.Tasks.Task<edgenode.Client.ApiResponse<ServiceBindDetailResponse>> UpdateEdgeNodeSvcDetailWithHttpInfoAsync(long edgenodeId, long bindId, UpdateServiceBindRequest updateServiceBindRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateServiceBindRequest' is set
            if (updateServiceBindRequest == null)
            {
                throw new edgenode.Client.ApiException(400, "Missing required parameter 'updateServiceBindRequest' when calling DefaultApi->UpdateEdgeNodeSvcDetail");
            }


            edgenode.Client.RequestOptions localVarRequestOptions = new edgenode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; version=3"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = edgenode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgenode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("edgenodeId", edgenode.Client.ClientUtils.ParameterToString(edgenodeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("bindId", edgenode.Client.ClientUtils.ParameterToString(bindId)); // path parameter
            localVarRequestOptions.Data = updateServiceBindRequest;

            localVarRequestOptions.Operation = "DefaultApi.UpdateEdgeNodeSvcDetail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ServiceBindDetailResponse>("/edge_nodes/{edgenodeId}/services/{bindId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEdgeNodeSvcDetail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
