/*
 * Edgenode API
 *
 * Azion Orchestration
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using edgenode.Client;
using edgenode.Api;
// uncomment below to import models
//using edgenode.Model;

namespace edgenode.Test.Api
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DefaultApiTests : IDisposable
    {
        private DefaultApi instance;

        public DefaultApiTests()
        {
            instance = new DefaultApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DefaultApi
            //Assert.IsType<DefaultApi>(instance);
        }

        /// <summary>
        /// Test AuthorizeEdgeNode
        /// </summary>
        [Fact]
        public void AuthorizeEdgeNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AuthorizeEdgeNodesRequest authorizeEdgeNodesRequest = null;
            //var response = instance.AuthorizeEdgeNode(authorizeEdgeNodesRequest);
            //Assert.IsType<AuthorizeEdgeNodesResponse>(response);
        }

        /// <summary>
        /// Test CreateEdgeNodeSvcs
        /// </summary>
        [Fact]
        public void CreateEdgeNodeSvcsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long edgenodeId = null;
            //ServiceBindRequest serviceBindRequest = null;
            //var response = instance.CreateEdgeNodeSvcs(edgenodeId, serviceBindRequest);
            //Assert.IsType<ServiceBindDetailResponse>(response);
        }

        /// <summary>
        /// Test DelEdgeNode
        /// </summary>
        [Fact]
        public void DelEdgeNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long edgenodeId = null;
            //instance.DelEdgeNode(edgenodeId);
        }

        /// <summary>
        /// Test DelEdgeNodeSvc
        /// </summary>
        [Fact]
        public void DelEdgeNodeSvcTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long edgenodeId = null;
            //long bindId = null;
            //instance.DelEdgeNodeSvc(edgenodeId, bindId);
        }

        /// <summary>
        /// Test GetEdgeNode
        /// </summary>
        [Fact]
        public void GetEdgeNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long edgenodeId = null;
            //var response = instance.GetEdgeNode(edgenodeId);
            //Assert.IsType<EdgeNodeDetailResponse>(response);
        }

        /// <summary>
        /// Test GetEdgeNodeGroups
        /// </summary>
        [Fact]
        public void GetEdgeNodeGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetEdgeNodeGroups();
            //Assert.IsType<List<NodeGroupResponse>>(response);
        }

        /// <summary>
        /// Test GetEdgeNodeSvcDetail
        /// </summary>
        [Fact]
        public void GetEdgeNodeSvcDetailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long edgenodeId = null;
            //long bindId = null;
            //var response = instance.GetEdgeNodeSvcDetail(edgenodeId, bindId);
            //Assert.IsType<ServiceBindDetailResponse>(response);
        }

        /// <summary>
        /// Test GetEdgeNodeSvcs
        /// </summary>
        [Fact]
        public void GetEdgeNodeSvcsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long edgenodeId = null;
            //bool? isBound = null;
            //string filter = null;
            //string orderBy = null;
            //string sort = null;
            //long? page = null;
            //long? pageSize = null;
            //var response = instance.GetEdgeNodeSvcs(edgenodeId, isBound, filter, orderBy, sort, page, pageSize);
            //Assert.IsType<ServiceResponseWithTotal>(response);
        }

        /// <summary>
        /// Test GetEdgeNodes
        /// </summary>
        [Fact]
        public void GetEdgeNodesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //string orderBy = null;
            //string sort = null;
            //bool? onlyIds = null;
            //long? pageSize = null;
            //var response = instance.GetEdgeNodes(filter, orderBy, sort, onlyIds, pageSize);
            //Assert.IsType<EdgeNodeResponseWithTotal>(response);
        }

        /// <summary>
        /// Test UpdateEdgeNode
        /// </summary>
        [Fact]
        public void UpdateEdgeNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long edgenodeId = null;
            //var response = instance.UpdateEdgeNode(edgenodeId);
            //Assert.IsType<UpdateEdgeNodeResponse>(response);
        }

        /// <summary>
        /// Test UpdateEdgeNodeSvcDetail
        /// </summary>
        [Fact]
        public void UpdateEdgeNodeSvcDetailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long edgenodeId = null;
            //long bindId = null;
            //UpdateServiceBindRequest updateServiceBindRequest = null;
            //var response = instance.UpdateEdgeNodeSvcDetail(edgenodeId, bindId, updateServiceBindRequest);
            //Assert.IsType<ServiceBindDetailResponse>(response);
        }
    }
}
