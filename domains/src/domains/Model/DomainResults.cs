/*
 * Domain API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = domains.Client.OpenAPIDateConverter;

namespace domains.Model
{
    /// <summary>
    /// DomainResults
    /// </summary>
    [DataContract(Name = "DomainResults")]
    public partial class DomainResults : IEquatable<DomainResults>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainResults" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DomainResults() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainResults" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="cnames">cnames.</param>
        /// <param name="cnameAccessOnly">cnameAccessOnly.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="edgeApplicationId">edgeApplicationId.</param>
        /// <param name="digitalCertificateId">digitalCertificateId.</param>
        /// <param name="domainName">domainName.</param>
        /// <param name="environment">environment.</param>
        public DomainResults(long id = default(long), string name = default(string), List<string> cnames = default(List<string>), bool cnameAccessOnly = default(bool), bool isActive = default(bool), long edgeApplicationId = default(long), long? digitalCertificateId = default(long?), string domainName = default(string), string environment = default(string))
        {
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for DomainResults and cannot be null");
            }
            this.Name = name;
            this.Cnames = cnames;
            this.CnameAccessOnly = cnameAccessOnly;
            this.IsActive = isActive;
            this.EdgeApplicationId = edgeApplicationId;
            this.DigitalCertificateId = digitalCertificateId;
            this.DomainName = domainName;
            this.Environment = environment;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Cnames
        /// </summary>
        [DataMember(Name = "cnames", EmitDefaultValue = false)]
        public List<string> Cnames { get; set; }

        /// <summary>
        /// Gets or Sets CnameAccessOnly
        /// </summary>
        [DataMember(Name = "cname_access_only", EmitDefaultValue = true)]
        public bool CnameAccessOnly { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name = "is_active", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets or Sets EdgeApplicationId
        /// </summary>
        [DataMember(Name = "edge_application_id", EmitDefaultValue = false)]
        public long EdgeApplicationId { get; set; }

        /// <summary>
        /// Gets or Sets DigitalCertificateId
        /// </summary>
        [DataMember(Name = "digital_certificate_id", EmitDefaultValue = true)]
        public long? DigitalCertificateId { get; set; }

        /// <summary>
        /// Gets or Sets DomainName
        /// </summary>
        [DataMember(Name = "domain_name", EmitDefaultValue = false)]
        public string DomainName { get; set; }

        /// <summary>
        /// Gets or Sets Environment
        /// </summary>
        [DataMember(Name = "environment", EmitDefaultValue = false)]
        public string Environment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DomainResults {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Cnames: ").Append(Cnames).Append("\n");
            sb.Append("  CnameAccessOnly: ").Append(CnameAccessOnly).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  EdgeApplicationId: ").Append(EdgeApplicationId).Append("\n");
            sb.Append("  DigitalCertificateId: ").Append(DigitalCertificateId).Append("\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("  Environment: ").Append(Environment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DomainResults);
        }

        /// <summary>
        /// Returns true if DomainResults instances are equal
        /// </summary>
        /// <param name="input">Instance of DomainResults to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainResults input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Cnames == input.Cnames ||
                    this.Cnames != null &&
                    input.Cnames != null &&
                    this.Cnames.SequenceEqual(input.Cnames)
                ) && 
                (
                    this.CnameAccessOnly == input.CnameAccessOnly ||
                    this.CnameAccessOnly.Equals(input.CnameAccessOnly)
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    this.IsActive.Equals(input.IsActive)
                ) && 
                (
                    this.EdgeApplicationId == input.EdgeApplicationId ||
                    this.EdgeApplicationId.Equals(input.EdgeApplicationId)
                ) && 
                (
                    this.DigitalCertificateId == input.DigitalCertificateId ||
                    (this.DigitalCertificateId != null &&
                    this.DigitalCertificateId.Equals(input.DigitalCertificateId))
                ) && 
                (
                    this.DomainName == input.DomainName ||
                    (this.DomainName != null &&
                    this.DomainName.Equals(input.DomainName))
                ) && 
                (
                    this.Environment == input.Environment ||
                    (this.Environment != null &&
                    this.Environment.Equals(input.Environment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Cnames != null)
                {
                    hashCode = (hashCode * 59) + this.Cnames.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CnameAccessOnly.GetHashCode();
                hashCode = (hashCode * 59) + this.IsActive.GetHashCode();
                hashCode = (hashCode * 59) + this.EdgeApplicationId.GetHashCode();
                if (this.DigitalCertificateId != null)
                {
                    hashCode = (hashCode * 59) + this.DigitalCertificateId.GetHashCode();
                }
                if (this.DomainName != null)
                {
                    hashCode = (hashCode * 59) + this.DomainName.GetHashCode();
                }
                if (this.Environment != null)
                {
                    hashCode = (hashCode * 59) + this.Environment.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
