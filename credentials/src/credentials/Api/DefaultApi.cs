/*
 * Credentials API
 *
 * Azion Orchestration
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using credentials.Client;
using credentials.Model;

namespace credentials.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create credential
        /// </summary>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCredentialRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AuthToken</returns>
        AuthToken CreateCredential(CreateCredentialRequest createCredentialRequest, int operationIndex = 0);

        /// <summary>
        /// Create credential
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCredentialRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AuthToken</returns>
        ApiResponse<AuthToken> CreateCredentialWithHttpInfo(CreateCredentialRequest createCredentialRequest, int operationIndex = 0);
        /// <summary>
        /// Delete the Credential
        /// </summary>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteCredential(long credentialId, int operationIndex = 0);

        /// <summary>
        /// Delete the Credential
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCredentialWithHttpInfo(long credentialId, int operationIndex = 0);
        /// <summary>
        /// Return all credentials
        /// </summary>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseWithTotal</returns>
        ResponseWithTotal FindAll(string filter = default(string), long? page = default(long?), long? pageSize = default(long?), string sort = default(string), string orderBy = default(string), int operationIndex = 0);

        /// <summary>
        /// Return all credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseWithTotal</returns>
        ApiResponse<ResponseWithTotal> FindAllWithHttpInfo(string filter = default(string), long? page = default(long?), long? pageSize = default(long?), string sort = default(string), string orderBy = default(string), int operationIndex = 0);
        /// <summary>
        /// Load the Credential
        /// </summary>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Response</returns>
        Response LoadCredential(long credentialId, int operationIndex = 0);

        /// <summary>
        /// Load the Credential
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> LoadCredentialWithHttpInfo(long credentialId, int operationIndex = 0);
        /// <summary>
        /// Update the Credential
        /// </summary>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId"></param>
        /// <param name="updateCredentialRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Response</returns>
        Response UpdateCredential(long credentialId, UpdateCredentialRequest updateCredentialRequest, int operationIndex = 0);

        /// <summary>
        /// Update the Credential
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId"></param>
        /// <param name="updateCredentialRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> UpdateCredentialWithHttpInfo(long credentialId, UpdateCredentialRequest updateCredentialRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create credential
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCredentialRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthToken</returns>
        System.Threading.Tasks.Task<AuthToken> CreateCredentialAsync(CreateCredentialRequest createCredentialRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create credential
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCredentialRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthToken>> CreateCredentialWithHttpInfoAsync(CreateCredentialRequest createCredentialRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete the Credential
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCredentialAsync(long credentialId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete the Credential
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCredentialWithHttpInfoAsync(long credentialId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return all credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseWithTotal</returns>
        System.Threading.Tasks.Task<ResponseWithTotal> FindAllAsync(string filter = default(string), long? page = default(long?), long? pageSize = default(long?), string sort = default(string), string orderBy = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return all credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseWithTotal)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseWithTotal>> FindAllWithHttpInfoAsync(string filter = default(string), long? page = default(long?), long? pageSize = default(long?), string sort = default(string), string orderBy = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Load the Credential
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> LoadCredentialAsync(long credentialId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load the Credential
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> LoadCredentialWithHttpInfoAsync(long credentialId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the Credential
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId"></param>
        /// <param name="updateCredentialRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> UpdateCredentialAsync(long credentialId, UpdateCredentialRequest updateCredentialRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the Credential
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId"></param>
        /// <param name="updateCredentialRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> UpdateCredentialWithHttpInfoAsync(long credentialId, UpdateCredentialRequest updateCredentialRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private credentials.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            this.Configuration = credentials.Client.Configuration.MergeConfigurations(
                credentials.Client.GlobalConfiguration.Instance,
                new credentials.Client.Configuration { BasePath = basePath }
            );
            this.Client = new credentials.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new credentials.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = credentials.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(credentials.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = credentials.Client.Configuration.MergeConfigurations(
                credentials.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new credentials.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new credentials.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = credentials.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(credentials.Client.ISynchronousClient client, credentials.Client.IAsynchronousClient asyncClient, credentials.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = credentials.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public credentials.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public credentials.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public credentials.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public credentials.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create credential 
        /// </summary>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCredentialRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AuthToken</returns>
        public AuthToken CreateCredential(CreateCredentialRequest createCredentialRequest, int operationIndex = 0)
        {
            credentials.Client.ApiResponse<AuthToken> localVarResponse = CreateCredentialWithHttpInfo(createCredentialRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create credential 
        /// </summary>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCredentialRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AuthToken</returns>
        public credentials.Client.ApiResponse<AuthToken> CreateCredentialWithHttpInfo(CreateCredentialRequest createCredentialRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createCredentialRequest' is set
            if (createCredentialRequest == null)
            {
                throw new credentials.Client.ApiException(400, "Missing required parameter 'createCredentialRequest' when calling DefaultApi->CreateCredential");
            }

            credentials.Client.RequestOptions localVarRequestOptions = new credentials.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; version=3"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = credentials.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = credentials.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createCredentialRequest;

            localVarRequestOptions.Operation = "DefaultApi.CreateCredential";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthToken>("/credentials", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCredential", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create credential 
        /// </summary>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCredentialRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthToken</returns>
        public async System.Threading.Tasks.Task<AuthToken> CreateCredentialAsync(CreateCredentialRequest createCredentialRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            credentials.Client.ApiResponse<AuthToken> localVarResponse = await CreateCredentialWithHttpInfoAsync(createCredentialRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create credential 
        /// </summary>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCredentialRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthToken)</returns>
        public async System.Threading.Tasks.Task<credentials.Client.ApiResponse<AuthToken>> CreateCredentialWithHttpInfoAsync(CreateCredentialRequest createCredentialRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createCredentialRequest' is set
            if (createCredentialRequest == null)
            {
                throw new credentials.Client.ApiException(400, "Missing required parameter 'createCredentialRequest' when calling DefaultApi->CreateCredential");
            }


            credentials.Client.RequestOptions localVarRequestOptions = new credentials.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; version=3"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = credentials.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = credentials.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createCredentialRequest;

            localVarRequestOptions.Operation = "DefaultApi.CreateCredential";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthToken>("/credentials", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCredential", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the Credential 
        /// </summary>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteCredential(long credentialId, int operationIndex = 0)
        {
            DeleteCredentialWithHttpInfo(credentialId);
        }

        /// <summary>
        /// Delete the Credential 
        /// </summary>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public credentials.Client.ApiResponse<Object> DeleteCredentialWithHttpInfo(long credentialId, int operationIndex = 0)
        {
            credentials.Client.RequestOptions localVarRequestOptions = new credentials.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = credentials.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = credentials.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("credentialId", credentials.Client.ClientUtils.ParameterToString(credentialId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.DeleteCredential";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/credentials/{credentialId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCredential", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the Credential 
        /// </summary>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCredentialAsync(long credentialId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCredentialWithHttpInfoAsync(credentialId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete the Credential 
        /// </summary>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<credentials.Client.ApiResponse<Object>> DeleteCredentialWithHttpInfoAsync(long credentialId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            credentials.Client.RequestOptions localVarRequestOptions = new credentials.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = credentials.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = credentials.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("credentialId", credentials.Client.ClientUtils.ParameterToString(credentialId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.DeleteCredential";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/credentials/{credentialId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCredential", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return all credentials 
        /// </summary>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseWithTotal</returns>
        public ResponseWithTotal FindAll(string filter = default(string), long? page = default(long?), long? pageSize = default(long?), string sort = default(string), string orderBy = default(string), int operationIndex = 0)
        {
            credentials.Client.ApiResponse<ResponseWithTotal> localVarResponse = FindAllWithHttpInfo(filter, page, pageSize, sort, orderBy);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return all credentials 
        /// </summary>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseWithTotal</returns>
        public credentials.Client.ApiResponse<ResponseWithTotal> FindAllWithHttpInfo(string filter = default(string), long? page = default(long?), long? pageSize = default(long?), string sort = default(string), string orderBy = default(string), int operationIndex = 0)
        {
            credentials.Client.RequestOptions localVarRequestOptions = new credentials.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = credentials.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = credentials.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(credentials.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(credentials.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(credentials.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(credentials.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(credentials.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }

            localVarRequestOptions.Operation = "DefaultApi.FindAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ResponseWithTotal>("/credentials", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return all credentials 
        /// </summary>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseWithTotal</returns>
        public async System.Threading.Tasks.Task<ResponseWithTotal> FindAllAsync(string filter = default(string), long? page = default(long?), long? pageSize = default(long?), string sort = default(string), string orderBy = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            credentials.Client.ApiResponse<ResponseWithTotal> localVarResponse = await FindAllWithHttpInfoAsync(filter, page, pageSize, sort, orderBy, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return all credentials 
        /// </summary>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseWithTotal)</returns>
        public async System.Threading.Tasks.Task<credentials.Client.ApiResponse<ResponseWithTotal>> FindAllWithHttpInfoAsync(string filter = default(string), long? page = default(long?), long? pageSize = default(long?), string sort = default(string), string orderBy = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            credentials.Client.RequestOptions localVarRequestOptions = new credentials.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = credentials.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = credentials.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(credentials.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(credentials.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(credentials.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(credentials.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(credentials.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }

            localVarRequestOptions.Operation = "DefaultApi.FindAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ResponseWithTotal>("/credentials", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load the Credential 
        /// </summary>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Response</returns>
        public Response LoadCredential(long credentialId, int operationIndex = 0)
        {
            credentials.Client.ApiResponse<Response> localVarResponse = LoadCredentialWithHttpInfo(credentialId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load the Credential 
        /// </summary>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Response</returns>
        public credentials.Client.ApiResponse<Response> LoadCredentialWithHttpInfo(long credentialId, int operationIndex = 0)
        {
            credentials.Client.RequestOptions localVarRequestOptions = new credentials.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = credentials.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = credentials.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("credentialId", credentials.Client.ClientUtils.ParameterToString(credentialId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.LoadCredential";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Response>("/credentials/{credentialId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoadCredential", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load the Credential 
        /// </summary>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> LoadCredentialAsync(long credentialId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            credentials.Client.ApiResponse<Response> localVarResponse = await LoadCredentialWithHttpInfoAsync(credentialId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load the Credential 
        /// </summary>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<credentials.Client.ApiResponse<Response>> LoadCredentialWithHttpInfoAsync(long credentialId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            credentials.Client.RequestOptions localVarRequestOptions = new credentials.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = credentials.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = credentials.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("credentialId", credentials.Client.ClientUtils.ParameterToString(credentialId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.LoadCredential";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Response>("/credentials/{credentialId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoadCredential", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the Credential 
        /// </summary>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId"></param>
        /// <param name="updateCredentialRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Response</returns>
        public Response UpdateCredential(long credentialId, UpdateCredentialRequest updateCredentialRequest, int operationIndex = 0)
        {
            credentials.Client.ApiResponse<Response> localVarResponse = UpdateCredentialWithHttpInfo(credentialId, updateCredentialRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the Credential 
        /// </summary>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId"></param>
        /// <param name="updateCredentialRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Response</returns>
        public credentials.Client.ApiResponse<Response> UpdateCredentialWithHttpInfo(long credentialId, UpdateCredentialRequest updateCredentialRequest, int operationIndex = 0)
        {
            // verify the required parameter 'updateCredentialRequest' is set
            if (updateCredentialRequest == null)
            {
                throw new credentials.Client.ApiException(400, "Missing required parameter 'updateCredentialRequest' when calling DefaultApi->UpdateCredential");
            }

            credentials.Client.RequestOptions localVarRequestOptions = new credentials.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; version=3"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = credentials.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = credentials.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("credentialId", credentials.Client.ClientUtils.ParameterToString(credentialId)); // path parameter
            localVarRequestOptions.Data = updateCredentialRequest;

            localVarRequestOptions.Operation = "DefaultApi.UpdateCredential";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Response>("/credentials/{credentialId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCredential", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the Credential 
        /// </summary>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId"></param>
        /// <param name="updateCredentialRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> UpdateCredentialAsync(long credentialId, UpdateCredentialRequest updateCredentialRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            credentials.Client.ApiResponse<Response> localVarResponse = await UpdateCredentialWithHttpInfoAsync(credentialId, updateCredentialRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the Credential 
        /// </summary>
        /// <exception cref="credentials.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId"></param>
        /// <param name="updateCredentialRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<credentials.Client.ApiResponse<Response>> UpdateCredentialWithHttpInfoAsync(long credentialId, UpdateCredentialRequest updateCredentialRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateCredentialRequest' is set
            if (updateCredentialRequest == null)
            {
                throw new credentials.Client.ApiException(400, "Missing required parameter 'updateCredentialRequest' when calling DefaultApi->UpdateCredential");
            }


            credentials.Client.RequestOptions localVarRequestOptions = new credentials.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; version=3"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = credentials.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = credentials.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("credentialId", credentials.Client.ClientUtils.ParameterToString(credentialId)); // path parameter
            localVarRequestOptions.Data = updateCredentialRequest;

            localVarRequestOptions.Operation = "DefaultApi.UpdateCredential";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Response>("/credentials/{credentialId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCredential", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
