/*
 * Purge API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using realtimepurge.Client;
using realtimepurge.Model;

namespace realtimepurge.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRealTimePurgeApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// /purge/cachekey
        /// </summary>
        /// <remarks>
        /// List of Cache Keys you want to remove from the Azion Edge Servers cache. urls (array): list of up to 50 Cache Keys to be expired from the cache, per request. method (choice): purge method, use the “delete” value for removal. Layer (choice): layer where the purge will be done. Use the value “edge_caching” (default value if not informed) to purge on the Edge Caching layer and the value “l2_caching” to purge on L2 Caching.
        /// </remarks>
        /// <exception cref="realtimepurge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="purgeCacheKeyRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PurgeCacheKey(string accept = default(string), string contentType = default(string), PurgeCacheKeyRequest purgeCacheKeyRequest = default(PurgeCacheKeyRequest), int operationIndex = 0);

        /// <summary>
        /// /purge/cachekey
        /// </summary>
        /// <remarks>
        /// List of Cache Keys you want to remove from the Azion Edge Servers cache. urls (array): list of up to 50 Cache Keys to be expired from the cache, per request. method (choice): purge method, use the “delete” value for removal. Layer (choice): layer where the purge will be done. Use the value “edge_caching” (default value if not informed) to purge on the Edge Caching layer and the value “l2_caching” to purge on L2 Caching.
        /// </remarks>
        /// <exception cref="realtimepurge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="purgeCacheKeyRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PurgeCacheKeyWithHttpInfo(string accept = default(string), string contentType = default(string), PurgeCacheKeyRequest purgeCacheKeyRequest = default(PurgeCacheKeyRequest), int operationIndex = 0);
        /// <summary>
        /// /purge/url
        /// </summary>
        /// <remarks>
        /// List of URLs you want to remove from the Azion Edge Servers cache. urls (array): list of up to 50 URLs to be expired from the cache, per request. method (choice): purge method, use the “delete” value for removal.
        /// </remarks>
        /// <exception cref="realtimepurge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="purgeUrlRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PurgeUrl(string accept = default(string), string contentType = default(string), PurgeUrlRequest purgeUrlRequest = default(PurgeUrlRequest), int operationIndex = 0);

        /// <summary>
        /// /purge/url
        /// </summary>
        /// <remarks>
        /// List of URLs you want to remove from the Azion Edge Servers cache. urls (array): list of up to 50 URLs to be expired from the cache, per request. method (choice): purge method, use the “delete” value for removal.
        /// </remarks>
        /// <exception cref="realtimepurge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="purgeUrlRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PurgeUrlWithHttpInfo(string accept = default(string), string contentType = default(string), PurgeUrlRequest purgeUrlRequest = default(PurgeUrlRequest), int operationIndex = 0);
        /// <summary>
        /// /purge/wildcard
        /// </summary>
        /// <remarks>
        /// The Wildcard expression that represents the list of objects that you want to remove from the Azion Edge Servers cache. urls (array):the Wildcard URL or Wildcard Cache Key that represents the list of objects you want to expire. You can only use one Wildcard expression per request. method (choice): purge method, use the “delete” value for removal.
        /// </remarks>
        /// <exception cref="realtimepurge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="purgeWildcardRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PurgeWildcard(string accept = default(string), string contentType = default(string), PurgeWildcardRequest purgeWildcardRequest = default(PurgeWildcardRequest), int operationIndex = 0);

        /// <summary>
        /// /purge/wildcard
        /// </summary>
        /// <remarks>
        /// The Wildcard expression that represents the list of objects that you want to remove from the Azion Edge Servers cache. urls (array):the Wildcard URL or Wildcard Cache Key that represents the list of objects you want to expire. You can only use one Wildcard expression per request. method (choice): purge method, use the “delete” value for removal.
        /// </remarks>
        /// <exception cref="realtimepurge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="purgeWildcardRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PurgeWildcardWithHttpInfo(string accept = default(string), string contentType = default(string), PurgeWildcardRequest purgeWildcardRequest = default(PurgeWildcardRequest), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRealTimePurgeApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// /purge/cachekey
        /// </summary>
        /// <remarks>
        /// List of Cache Keys you want to remove from the Azion Edge Servers cache. urls (array): list of up to 50 Cache Keys to be expired from the cache, per request. method (choice): purge method, use the “delete” value for removal. Layer (choice): layer where the purge will be done. Use the value “edge_caching” (default value if not informed) to purge on the Edge Caching layer and the value “l2_caching” to purge on L2 Caching.
        /// </remarks>
        /// <exception cref="realtimepurge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="purgeCacheKeyRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PurgeCacheKeyAsync(string accept = default(string), string contentType = default(string), PurgeCacheKeyRequest purgeCacheKeyRequest = default(PurgeCacheKeyRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// /purge/cachekey
        /// </summary>
        /// <remarks>
        /// List of Cache Keys you want to remove from the Azion Edge Servers cache. urls (array): list of up to 50 Cache Keys to be expired from the cache, per request. method (choice): purge method, use the “delete” value for removal. Layer (choice): layer where the purge will be done. Use the value “edge_caching” (default value if not informed) to purge on the Edge Caching layer and the value “l2_caching” to purge on L2 Caching.
        /// </remarks>
        /// <exception cref="realtimepurge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="purgeCacheKeyRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PurgeCacheKeyWithHttpInfoAsync(string accept = default(string), string contentType = default(string), PurgeCacheKeyRequest purgeCacheKeyRequest = default(PurgeCacheKeyRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// /purge/url
        /// </summary>
        /// <remarks>
        /// List of URLs you want to remove from the Azion Edge Servers cache. urls (array): list of up to 50 URLs to be expired from the cache, per request. method (choice): purge method, use the “delete” value for removal.
        /// </remarks>
        /// <exception cref="realtimepurge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="purgeUrlRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PurgeUrlAsync(string accept = default(string), string contentType = default(string), PurgeUrlRequest purgeUrlRequest = default(PurgeUrlRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// /purge/url
        /// </summary>
        /// <remarks>
        /// List of URLs you want to remove from the Azion Edge Servers cache. urls (array): list of up to 50 URLs to be expired from the cache, per request. method (choice): purge method, use the “delete” value for removal.
        /// </remarks>
        /// <exception cref="realtimepurge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="purgeUrlRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PurgeUrlWithHttpInfoAsync(string accept = default(string), string contentType = default(string), PurgeUrlRequest purgeUrlRequest = default(PurgeUrlRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// /purge/wildcard
        /// </summary>
        /// <remarks>
        /// The Wildcard expression that represents the list of objects that you want to remove from the Azion Edge Servers cache. urls (array):the Wildcard URL or Wildcard Cache Key that represents the list of objects you want to expire. You can only use one Wildcard expression per request. method (choice): purge method, use the “delete” value for removal.
        /// </remarks>
        /// <exception cref="realtimepurge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="purgeWildcardRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PurgeWildcardAsync(string accept = default(string), string contentType = default(string), PurgeWildcardRequest purgeWildcardRequest = default(PurgeWildcardRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// /purge/wildcard
        /// </summary>
        /// <remarks>
        /// The Wildcard expression that represents the list of objects that you want to remove from the Azion Edge Servers cache. urls (array):the Wildcard URL or Wildcard Cache Key that represents the list of objects you want to expire. You can only use one Wildcard expression per request. method (choice): purge method, use the “delete” value for removal.
        /// </remarks>
        /// <exception cref="realtimepurge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="purgeWildcardRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PurgeWildcardWithHttpInfoAsync(string accept = default(string), string contentType = default(string), PurgeWildcardRequest purgeWildcardRequest = default(PurgeWildcardRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRealTimePurgeApi : IRealTimePurgeApiSync, IRealTimePurgeApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RealTimePurgeApi : IRealTimePurgeApi
    {
        private realtimepurge.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RealTimePurgeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RealTimePurgeApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RealTimePurgeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RealTimePurgeApi(string basePath)
        {
            this.Configuration = realtimepurge.Client.Configuration.MergeConfigurations(
                realtimepurge.Client.GlobalConfiguration.Instance,
                new realtimepurge.Client.Configuration { BasePath = basePath }
            );
            this.Client = new realtimepurge.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new realtimepurge.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = realtimepurge.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RealTimePurgeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RealTimePurgeApi(realtimepurge.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = realtimepurge.Client.Configuration.MergeConfigurations(
                realtimepurge.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new realtimepurge.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new realtimepurge.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = realtimepurge.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RealTimePurgeApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RealTimePurgeApi(realtimepurge.Client.ISynchronousClient client, realtimepurge.Client.IAsynchronousClient asyncClient, realtimepurge.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = realtimepurge.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public realtimepurge.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public realtimepurge.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public realtimepurge.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public realtimepurge.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// /purge/cachekey List of Cache Keys you want to remove from the Azion Edge Servers cache. urls (array): list of up to 50 Cache Keys to be expired from the cache, per request. method (choice): purge method, use the “delete” value for removal. Layer (choice): layer where the purge will be done. Use the value “edge_caching” (default value if not informed) to purge on the Edge Caching layer and the value “l2_caching” to purge on L2 Caching.
        /// </summary>
        /// <exception cref="realtimepurge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="purgeCacheKeyRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PurgeCacheKey(string accept = default(string), string contentType = default(string), PurgeCacheKeyRequest purgeCacheKeyRequest = default(PurgeCacheKeyRequest), int operationIndex = 0)
        {
            PurgeCacheKeyWithHttpInfo(accept, contentType, purgeCacheKeyRequest);
        }

        /// <summary>
        /// /purge/cachekey List of Cache Keys you want to remove from the Azion Edge Servers cache. urls (array): list of up to 50 Cache Keys to be expired from the cache, per request. method (choice): purge method, use the “delete” value for removal. Layer (choice): layer where the purge will be done. Use the value “edge_caching” (default value if not informed) to purge on the Edge Caching layer and the value “l2_caching” to purge on L2 Caching.
        /// </summary>
        /// <exception cref="realtimepurge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="purgeCacheKeyRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public realtimepurge.Client.ApiResponse<Object> PurgeCacheKeyWithHttpInfo(string accept = default(string), string contentType = default(string), PurgeCacheKeyRequest purgeCacheKeyRequest = default(PurgeCacheKeyRequest), int operationIndex = 0)
        {
            realtimepurge.Client.RequestOptions localVarRequestOptions = new realtimepurge.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; version=3"
            };

            var localVarContentType = realtimepurge.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = realtimepurge.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", realtimepurge.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }
            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", realtimepurge.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }
            localVarRequestOptions.Data = purgeCacheKeyRequest;

            localVarRequestOptions.Operation = "RealTimePurgeApi.PurgeCacheKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/purge/cachekey", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PurgeCacheKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// /purge/cachekey List of Cache Keys you want to remove from the Azion Edge Servers cache. urls (array): list of up to 50 Cache Keys to be expired from the cache, per request. method (choice): purge method, use the “delete” value for removal. Layer (choice): layer where the purge will be done. Use the value “edge_caching” (default value if not informed) to purge on the Edge Caching layer and the value “l2_caching” to purge on L2 Caching.
        /// </summary>
        /// <exception cref="realtimepurge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="purgeCacheKeyRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PurgeCacheKeyAsync(string accept = default(string), string contentType = default(string), PurgeCacheKeyRequest purgeCacheKeyRequest = default(PurgeCacheKeyRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PurgeCacheKeyWithHttpInfoAsync(accept, contentType, purgeCacheKeyRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// /purge/cachekey List of Cache Keys you want to remove from the Azion Edge Servers cache. urls (array): list of up to 50 Cache Keys to be expired from the cache, per request. method (choice): purge method, use the “delete” value for removal. Layer (choice): layer where the purge will be done. Use the value “edge_caching” (default value if not informed) to purge on the Edge Caching layer and the value “l2_caching” to purge on L2 Caching.
        /// </summary>
        /// <exception cref="realtimepurge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="purgeCacheKeyRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<realtimepurge.Client.ApiResponse<Object>> PurgeCacheKeyWithHttpInfoAsync(string accept = default(string), string contentType = default(string), PurgeCacheKeyRequest purgeCacheKeyRequest = default(PurgeCacheKeyRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            realtimepurge.Client.RequestOptions localVarRequestOptions = new realtimepurge.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; version=3"
            };

            var localVarContentType = realtimepurge.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = realtimepurge.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", realtimepurge.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }
            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", realtimepurge.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }
            localVarRequestOptions.Data = purgeCacheKeyRequest;

            localVarRequestOptions.Operation = "RealTimePurgeApi.PurgeCacheKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/purge/cachekey", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PurgeCacheKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// /purge/url List of URLs you want to remove from the Azion Edge Servers cache. urls (array): list of up to 50 URLs to be expired from the cache, per request. method (choice): purge method, use the “delete” value for removal.
        /// </summary>
        /// <exception cref="realtimepurge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="purgeUrlRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PurgeUrl(string accept = default(string), string contentType = default(string), PurgeUrlRequest purgeUrlRequest = default(PurgeUrlRequest), int operationIndex = 0)
        {
            PurgeUrlWithHttpInfo(accept, contentType, purgeUrlRequest);
        }

        /// <summary>
        /// /purge/url List of URLs you want to remove from the Azion Edge Servers cache. urls (array): list of up to 50 URLs to be expired from the cache, per request. method (choice): purge method, use the “delete” value for removal.
        /// </summary>
        /// <exception cref="realtimepurge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="purgeUrlRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public realtimepurge.Client.ApiResponse<Object> PurgeUrlWithHttpInfo(string accept = default(string), string contentType = default(string), PurgeUrlRequest purgeUrlRequest = default(PurgeUrlRequest), int operationIndex = 0)
        {
            realtimepurge.Client.RequestOptions localVarRequestOptions = new realtimepurge.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; version=3"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = realtimepurge.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = realtimepurge.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", realtimepurge.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }
            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", realtimepurge.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }
            localVarRequestOptions.Data = purgeUrlRequest;

            localVarRequestOptions.Operation = "RealTimePurgeApi.PurgeUrl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/purge/url", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PurgeUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// /purge/url List of URLs you want to remove from the Azion Edge Servers cache. urls (array): list of up to 50 URLs to be expired from the cache, per request. method (choice): purge method, use the “delete” value for removal.
        /// </summary>
        /// <exception cref="realtimepurge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="purgeUrlRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PurgeUrlAsync(string accept = default(string), string contentType = default(string), PurgeUrlRequest purgeUrlRequest = default(PurgeUrlRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PurgeUrlWithHttpInfoAsync(accept, contentType, purgeUrlRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// /purge/url List of URLs you want to remove from the Azion Edge Servers cache. urls (array): list of up to 50 URLs to be expired from the cache, per request. method (choice): purge method, use the “delete” value for removal.
        /// </summary>
        /// <exception cref="realtimepurge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="purgeUrlRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<realtimepurge.Client.ApiResponse<Object>> PurgeUrlWithHttpInfoAsync(string accept = default(string), string contentType = default(string), PurgeUrlRequest purgeUrlRequest = default(PurgeUrlRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            realtimepurge.Client.RequestOptions localVarRequestOptions = new realtimepurge.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; version=3"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = realtimepurge.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = realtimepurge.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", realtimepurge.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }
            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", realtimepurge.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }
            localVarRequestOptions.Data = purgeUrlRequest;

            localVarRequestOptions.Operation = "RealTimePurgeApi.PurgeUrl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/purge/url", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PurgeUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// /purge/wildcard The Wildcard expression that represents the list of objects that you want to remove from the Azion Edge Servers cache. urls (array):the Wildcard URL or Wildcard Cache Key that represents the list of objects you want to expire. You can only use one Wildcard expression per request. method (choice): purge method, use the “delete” value for removal.
        /// </summary>
        /// <exception cref="realtimepurge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="purgeWildcardRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PurgeWildcard(string accept = default(string), string contentType = default(string), PurgeWildcardRequest purgeWildcardRequest = default(PurgeWildcardRequest), int operationIndex = 0)
        {
            PurgeWildcardWithHttpInfo(accept, contentType, purgeWildcardRequest);
        }

        /// <summary>
        /// /purge/wildcard The Wildcard expression that represents the list of objects that you want to remove from the Azion Edge Servers cache. urls (array):the Wildcard URL or Wildcard Cache Key that represents the list of objects you want to expire. You can only use one Wildcard expression per request. method (choice): purge method, use the “delete” value for removal.
        /// </summary>
        /// <exception cref="realtimepurge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="purgeWildcardRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public realtimepurge.Client.ApiResponse<Object> PurgeWildcardWithHttpInfo(string accept = default(string), string contentType = default(string), PurgeWildcardRequest purgeWildcardRequest = default(PurgeWildcardRequest), int operationIndex = 0)
        {
            realtimepurge.Client.RequestOptions localVarRequestOptions = new realtimepurge.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; version=3"
            };

            var localVarContentType = realtimepurge.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = realtimepurge.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", realtimepurge.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }
            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", realtimepurge.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }
            localVarRequestOptions.Data = purgeWildcardRequest;

            localVarRequestOptions.Operation = "RealTimePurgeApi.PurgeWildcard";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/purge/wildcard", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PurgeWildcard", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// /purge/wildcard The Wildcard expression that represents the list of objects that you want to remove from the Azion Edge Servers cache. urls (array):the Wildcard URL or Wildcard Cache Key that represents the list of objects you want to expire. You can only use one Wildcard expression per request. method (choice): purge method, use the “delete” value for removal.
        /// </summary>
        /// <exception cref="realtimepurge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="purgeWildcardRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PurgeWildcardAsync(string accept = default(string), string contentType = default(string), PurgeWildcardRequest purgeWildcardRequest = default(PurgeWildcardRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PurgeWildcardWithHttpInfoAsync(accept, contentType, purgeWildcardRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// /purge/wildcard The Wildcard expression that represents the list of objects that you want to remove from the Azion Edge Servers cache. urls (array):the Wildcard URL or Wildcard Cache Key that represents the list of objects you want to expire. You can only use one Wildcard expression per request. method (choice): purge method, use the “delete” value for removal.
        /// </summary>
        /// <exception cref="realtimepurge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="purgeWildcardRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<realtimepurge.Client.ApiResponse<Object>> PurgeWildcardWithHttpInfoAsync(string accept = default(string), string contentType = default(string), PurgeWildcardRequest purgeWildcardRequest = default(PurgeWildcardRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            realtimepurge.Client.RequestOptions localVarRequestOptions = new realtimepurge.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; version=3"
            };

            var localVarContentType = realtimepurge.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = realtimepurge.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", realtimepurge.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }
            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", realtimepurge.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }
            localVarRequestOptions.Data = purgeWildcardRequest;

            localVarRequestOptions.Operation = "RealTimePurgeApi.PurgeWildcard";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/purge/wildcard", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PurgeWildcard", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
