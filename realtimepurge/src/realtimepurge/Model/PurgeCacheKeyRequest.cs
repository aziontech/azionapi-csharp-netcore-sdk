/*
 * Purge API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = realtimepurge.Client.OpenAPIDateConverter;

namespace realtimepurge.Model
{
    /// <summary>
    /// PurgeCacheKeyRequest
    /// </summary>
    [DataContract(Name = "PurgeCacheKeyRequest")]
    public partial class PurgeCacheKeyRequest : IEquatable<PurgeCacheKeyRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PurgeCacheKeyRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PurgeCacheKeyRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PurgeCacheKeyRequest" /> class.
        /// </summary>
        /// <param name="urls">urls (required).</param>
        /// <param name="method">method (required).</param>
        /// <param name="layer">layer (required).</param>
        public PurgeCacheKeyRequest(List<string> urls = default(List<string>), string method = default(string), string layer = default(string))
        {
            // to ensure "urls" is required (not null)
            if (urls == null)
            {
                throw new ArgumentNullException("urls is a required property for PurgeCacheKeyRequest and cannot be null");
            }
            this.Urls = urls;
            // to ensure "method" is required (not null)
            if (method == null)
            {
                throw new ArgumentNullException("method is a required property for PurgeCacheKeyRequest and cannot be null");
            }
            this.Method = method;
            // to ensure "layer" is required (not null)
            if (layer == null)
            {
                throw new ArgumentNullException("layer is a required property for PurgeCacheKeyRequest and cannot be null");
            }
            this.Layer = layer;
        }

        /// <summary>
        /// Gets or Sets Urls
        /// </summary>
        [DataMember(Name = "urls", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Urls { get; set; }

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [DataMember(Name = "method", IsRequired = true, EmitDefaultValue = true)]
        public string Method { get; set; }

        /// <summary>
        /// Gets or Sets Layer
        /// </summary>
        [DataMember(Name = "layer", IsRequired = true, EmitDefaultValue = true)]
        public string Layer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PurgeCacheKeyRequest {\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Layer: ").Append(Layer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PurgeCacheKeyRequest);
        }

        /// <summary>
        /// Returns true if PurgeCacheKeyRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PurgeCacheKeyRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PurgeCacheKeyRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Urls == input.Urls ||
                    this.Urls != null &&
                    input.Urls != null &&
                    this.Urls.SequenceEqual(input.Urls)
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.Layer == input.Layer ||
                    (this.Layer != null &&
                    this.Layer.Equals(input.Layer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Urls != null)
                {
                    hashCode = (hashCode * 59) + this.Urls.GetHashCode();
                }
                if (this.Method != null)
                {
                    hashCode = (hashCode * 59) + this.Method.GetHashCode();
                }
                if (this.Layer != null)
                {
                    hashCode = (hashCode * 59) + this.Layer.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
