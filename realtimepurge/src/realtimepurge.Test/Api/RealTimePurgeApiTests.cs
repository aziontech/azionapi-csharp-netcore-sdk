/*
 * Purge API
 *
 * Azion Real-Time Purge
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using realtimepurge.Client;
using realtimepurge.Api;
// uncomment below to import models
//using realtimepurge.Model;

namespace realtimepurge.Test.Api
{
    /// <summary>
    ///  Class for testing RealTimePurgeApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class RealTimePurgeApiTests : IDisposable
    {
        private RealTimePurgeApi instance;

        public RealTimePurgeApiTests()
        {
            instance = new RealTimePurgeApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of RealTimePurgeApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' RealTimePurgeApi
            //Assert.IsType<RealTimePurgeApi>(instance);
        }

        /// <summary>
        /// Test PurgeCacheKey
        /// </summary>
        [Fact]
        public void PurgeCacheKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //PurgeCacheKeyRequest purgeCacheKeyRequest = null;
            //instance.PurgeCacheKey(accept, contentType, purgeCacheKeyRequest);
        }

        /// <summary>
        /// Test PurgeUrl
        /// </summary>
        [Fact]
        public void PurgeUrlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //PurgeUrlRequest purgeUrlRequest = null;
            //instance.PurgeUrl(accept, contentType, purgeUrlRequest);
        }

        /// <summary>
        /// Test PurgeWildcard
        /// </summary>
        [Fact]
        public void PurgeWildcardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string contentType = null;
            //PurgeWildcardRequest purgeWildcardRequest = null;
            //instance.PurgeWildcard(accept, contentType, purgeWildcardRequest);
        }
    }
}
